#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Claude MultiAgent Framework CLI
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º

–ê–≤—Ç–æ—Ä: Claude MultiAgent System
–î–∞—Ç–∞: 2025-07-11
"""

import os
import sys
import json
import click
import subprocess
from pathlib import Path
from typing import Dict, List, Any, Optional
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich import box

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

try:
    from project_templates import create_project_from_template
    from config_profiles import get_config_for_project, create_project_config
    from config_validator import validate_project_config, config_validator
except ImportError as e:
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")

console = Console()

class FrameworkCLI:
    """CLI –¥–ª—è Claude MultiAgent Framework"""
    
    def __init__(self):
        self.version = "1.0.0"
        self.current_project = self._detect_current_project()
    
    def _detect_current_project(self) -> Optional[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        config_file = Path("config/framework_config.json")
        if config_file.exists():
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                pass
        return None
    
    def show_banner(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ CLI"""
        banner_text = Text()
        banner_text.append("Claude MultiAgent Framework", style="bold cyan")
        banner_text.append(f" v{self.version}", style="dim")
        
        panel = Panel(
            banner_text,
            title="ü§ñ Framework CLI",
            border_style="cyan",
            box=box.ROUNDED
        )
        console.print(panel)

@click.group()
@click.version_option(version="1.0.0", prog_name="Claude MultiAgent Framework CLI")
@click.pass_context
def cli(ctx):
    """Claude MultiAgent Framework - CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    ctx.ensure_object(dict)
    ctx.obj['cli'] = FrameworkCLI()

@cli.command()
@click.option('--name', '-n', required=True, help='–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--type', '-t', 'project_type', 
              type=click.Choice([
                  'telegram_bot', 'web_api', 'cli_tool', 'data_pipeline',
                  'microservice', 'ml_service', 'desktop_app', 'iot_device'
              ]), required=True, help='–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--scale', '-s', 
              type=click.Choice(['minimal', 'standard', 'advanced', 'enterprise']),
              default='standard', help='–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--dir', '-d', 'output_dir', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--no-install', is_flag=True, help='–ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
@click.option('--no-git', is_flag=True, help='–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git')
def create(name, project_type, scale, output_dir, no_install, no_git):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å Claude MultiAgent Framework"""
    
    console.print(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: [bold]{name}[/bold]")
    console.print(f"üìã –¢–∏–ø: [cyan]{project_type}[/cyan]")
    console.print(f"üìä –ú–∞—Å—à—Ç–∞–±: [yellow]{scale}[/yellow]")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        if 'create_project_from_template' in globals():
            project_path = create_project_from_template(name, project_type, scale)
            
            if output_dir:
                import shutil
                target_path = Path(output_dir) / name
                if target_path.exists():
                    console.print(f"[red]‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {target_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/red]")
                    return
                
                shutil.move(project_path, target_path)
                project_path = str(target_path)
        else:
            # Fallback: –±–∞–∑–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            project_path = output_dir or f"./generated_projects/{name}"
            Path(project_path).mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            (Path(project_path) / "framework_init.py").write_text(
                f'print("–ü—Ä–æ–µ–∫—Ç {name} —Å–æ–∑–¥–∞–Ω!")'
            )
        
        console.print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: [green]{project_path}[/green]")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if not no_install:
            console.print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            # TODO: –∑–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        if not no_git:
            console.print("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git...")
            # TODO: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        console.print("\nüöÄ [bold]–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:[/bold]")
        console.print(f"cd {project_path}")
        console.print("python framework_init.py")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}[/red]")

@cli.command()
@click.option('--project-type', '-t', help='–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø—Ä–æ–µ–∫—Ç–∞')
def list_profiles(project_type):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    try:
        if 'profile_manager' in globals():
            from config_profiles import profile_manager, ProjectType
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
            project_type_enum = None
            if project_type:
                try:
                    project_type_enum = ProjectType(project_type)
                except ValueError:
                    console.print(f"[red]‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {project_type}[/red]")
                    return
            
            profiles = profile_manager.list_profiles(project_type_enum)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            table.add_column("–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è", style="cyan")
            table.add_column("–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞", style="green")
            table.add_column("–ú–∞—Å—à—Ç–∞–±", style="yellow")
            table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
            
            for profile_name in profiles:
                profile = profile_manager.get_profile(profile_name)
                if profile:
                    table.add_row(
                        profile_name,
                        profile.project_type.value,
                        profile.scale_profile.value,
                        profile.name
                    )
            
            console.print(table)
        else:
            console.print("[yellow]‚ö†Ô∏è –ú–æ–¥—É–ª—å –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}[/red]")

@cli.command()
@click.argument('config_file', required=False)
def validate(config_file):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    if not config_file:
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ
        config_file = "config/framework_config.json"
        if not Path(config_file).exists():
            console.print("[red]‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
            console.print("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
            return
    
    console.print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: [cyan]{config_file}[/cyan]")
    
    try:
        if 'validate_project_config' in globals():
            is_valid = validate_project_config(config_file)
            
            if is_valid:
                console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞![/green]")
            else:
                console.print("[red]‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏[/red]")
        else:
            console.print("[yellow]‚ö†Ô∏è –ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}[/red]")

@cli.command()
@click.option('--name', '-n', required=True, help='–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
@click.option('--type', '-t', 'config_type', required=True, help='–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--scale', '-s', default='standard', help='–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
def generate_config(name, config_type, scale, output):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    
    console.print(f"‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: [bold]{name}[/bold]")
    
    try:
        if 'create_project_config' in globals():
            config_file = create_project_config(name, config_type, scale)
            
            if output:
                import shutil
                shutil.move(config_file, output)
                config_file = output
            
            console.print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: [green]{config_file}[/green]")
        else:
            console.print("[yellow]‚ö†Ô∏è –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}[/red]")

@cli.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    config_file = Path("config/framework_config.json")
    
    if not config_file.exists():
        console.print("[yellow]‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞[/yellow]")
        console.print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
        return
    
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞
        project_info = config.get('project', {})
        framework_info = config.get('framework', {})
        
        status_text = Text()
        status_text.append(f"–ü—Ä–æ–µ–∫—Ç: ", style="bold")
        status_text.append(f"{project_info.get('name', 'Unknown')}\n", style="cyan")
        status_text.append(f"–¢–∏–ø: ", style="bold")
        status_text.append(f"{project_info.get('type', 'Unknown')}\n", style="green")
        status_text.append(f"–ú–∞—Å—à—Ç–∞–±: ", style="bold")
        status_text.append(f"{project_info.get('scale', 'Unknown')}\n", style="yellow")
        status_text.append(f"–í–µ—Ä—Å–∏—è: ", style="bold")
        status_text.append(f"{project_info.get('version', 'Unknown')}", style="white")
        
        panel = Panel(
            status_text,
            title="üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞",
            border_style="green",
            box=box.ROUNDED
        )
        console.print(panel)
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = framework_info.get('components', {})
        if components:
            table = Table(title="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞")
            table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan")
            table.add_column("–°—Ç–∞—Ç—É—Å", style="white")
            
            for component, enabled in components.items():
                status_icon = "‚úÖ –í–∫–ª—é—á–µ–Ω" if enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
                status_style = "green" if enabled else "red"
                table.add_row(component, f"[{status_style}]{status_icon}[/{status_style}]")
            
            console.print(table)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        console.print("\nüîç [bold]–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:[/bold]")
        
        essential_files = [
            "framework_init.py",
            "requirements.txt",
            "README.md"
        ]
        
        for file_name in essential_files:
            if Path(file_name).exists():
                console.print(f"‚úÖ {file_name}")
            else:
                console.print(f"‚ùå [red]{file_name}[/red]")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")

@cli.command()
@click.option('--component', '-c', help='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç')
def init(component):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ"""
    
    console.print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude MultiAgent Framework...")
    
    try:
        # –ü–æ–∏—Å–∫ framework_init.py
        init_file = Path("framework_init.py")
        if init_file.exists():
            # –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            result = subprocess.run(
                [sys.executable, "framework_init.py"],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                console.print("‚úÖ [green]–§—Ä–µ–π–º–≤–æ—Ä–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
                if result.stdout:
                    console.print(result.stdout)
            else:
                console.print("[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏[/red]")
                if result.stderr:
                    console.print(f"[red]{result.stderr}[/red]")
        else:
            console.print("[red]‚ùå –§–∞–π–ª framework_init.py –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
            console.print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")

@cli.command()
def install():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞"""
    
    console.print("üîß –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞...")
    
    # –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    install_script = Path("install.py")
    if install_script.exists():
        try:
            subprocess.run([sys.executable, str(install_script)], check=True)
        except subprocess.CalledProcessError as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}[/red]")
    else:
        console.print("[red]‚ùå –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
        console.print("–ó–∞–≥—Ä—É–∑–∏—Ç–µ install.py —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")

@cli.command()
@click.option('--format', 'output_format', 
              type=click.Choice(['table', 'json', 'yaml']),
              default='table', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
def list_templates(output_format):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    templates_info = [
        {
            "name": "telegram_bot",
            "description": "Telegram –±–æ—Ç —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º",
            "scales": ["minimal", "advanced"]
        },
        {
            "name": "web_api",
            "description": "RESTful API –Ω–∞ FastAPI",
            "scales": ["standard", "enterprise"]
        },
        {
            "name": "cli_tool",
            "description": "–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞",
            "scales": ["minimal"]
        },
        {
            "name": "data_pipeline",
            "description": "Pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            "scales": ["standard"]
        },
        {
            "name": "microservice",
            "description": "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å",
            "scales": ["standard"]
        },
        {
            "name": "ml_service",
            "description": "ML —Å–µ—Ä–≤–∏—Å",
            "scales": ["advanced"]
        }
    ]
    
    if output_format == 'table':
        table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤")
        table.add_column("–®–∞–±–ª–æ–Ω", style="cyan")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        table.add_column("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—à—Ç–∞–±—ã", style="yellow")
        
        for template in templates_info:
            scales_str = ", ".join(template["scales"])
            table.add_row(
                template["name"],
                template["description"], 
                scales_str
            )
        
        console.print(table)
        
    elif output_format == 'json':
        import json
        console.print(json.dumps(templates_info, indent=2, ensure_ascii=False))
        
    elif output_format == 'yaml':
        try:
            import yaml
            console.print(yaml.dump(templates_info, default_flow_style=False, allow_unicode=True))
        except ImportError:
            console.print("[red]‚ùå PyYAML –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/red]")

@cli.command()
def version():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    version_text = Text()
    version_text.append("Claude MultiAgent Framework\n", style="bold cyan")
    version_text.append(f"–í–µ—Ä—Å–∏—è: 1.0.0\n", style="white")
    version_text.append("–ê–≤—Ç–æ—Ä: Claude MultiAgent System\n", style="dim")
    version_text.append("–î–∞—Ç–∞: 2025-07-11", style="dim")
    
    panel = Panel(
        version_text,
        title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        border_style="blue",
        box=box.ROUNDED
    )
    console.print(panel)

if __name__ == '__main__':
    cli()
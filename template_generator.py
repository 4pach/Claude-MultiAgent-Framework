#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Template Generator - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞
–ß–∞—Å—Ç—å Claude MultiAgent Framework

–ê–≤—Ç–æ—Ä: Claude MultiAgent System
–î–∞—Ç–∞: 2025-07-11
"""

import json
import shutil
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import re
from datetime import datetime

@dataclass
class TemplateConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞"""
    project_name: str
    project_type: str
    framework_components: List[str]
    custom_variables: Dict[str, Any]
    output_directory: str

class TemplateGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, source_project_root: str):
        self.source_root = Path(source_project_root)
        self.template_root = Path("universal_template")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_data = self.load_analysis()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —à–∞–±–ª–æ–Ω–∞—Ö
        self.template_variables = {
            "{{PROJECT_NAME}}": "",
            "{{PROJECT_TYPE}}": "",
            "{{AUTHOR}}": "Claude MultiAgent System",
            "{{DATE}}": datetime.now().strftime("%Y-%m-%d"),
            "{{VERSION}}": "1.0.0"
        }
        
    def load_analysis(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        analysis_file = self.source_root / "autonomous" / "framework_analysis.json"
        
        if not analysis_file.exists():
            raise FileNotFoundError("–§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ framework_analyzer.py")
        
        with open(analysis_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def create_universal_template(self, template_config: TemplateConfig):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        print(f"üèóÔ∏è [–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä] –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {template_config.project_name}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞
        self.template_variables.update({
            "{{PROJECT_NAME}}": template_config.project_name,
            "{{PROJECT_TYPE}}": template_config.project_type
        })
        self.template_variables.update(template_config.custom_variables)
        
        output_path = Path(template_config.output_directory)
        output_path.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self._create_base_structure(output_path, template_config)
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._copy_framework_components(output_path, template_config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self._create_configuration_files(output_path, template_config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        self._create_initialization_scripts(output_path, template_config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self._create_documentation(output_path, template_config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self._create_usage_examples(output_path, template_config)
        
        print(f"‚úÖ [–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä] –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {output_path}")
        return output_path
    
    def _create_base_structure(self, output_path: Path, config: TemplateConfig):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        project_structure = self.analysis_data["template_structure"]["project_types"][config.project_type]["project_structure"]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for directory, files in project_structure.items():
            dir_path = output_path / directory.rstrip("/")
            dir_path.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ __init__.py –¥–ª—è Python –ø–∞–∫–µ—Ç–æ–≤
            if directory.endswith("/") and directory != "config/":
                init_file = dir_path / "__init__.py"
                init_file.write_text(f'"""\\n{directory.rstrip("/")} package - –ß–∞—Å—Ç—å {config.project_name}\\n"""')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self._create_root_files(output_path, config)
    
    def _create_root_files(self, output_path: Path, config: TemplateConfig):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        # .gitignore
        gitignore_content = """
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Environment
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Claude MultiAgent Framework
monitoring/performance.db
monitoring/cache/
logs/
autonomous/optimizations/
autonomous/config_backups/
reports/generated/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
"""
        (output_path / ".gitignore").write_text(gitignore_content.strip())
        
        # requirements.txt
        requirements_content = """
# Claude MultiAgent Framework dependencies
aiosqlite>=0.19.0
numpy>=1.24.0
scikit-learn>=1.3.0
matplotlib>=3.7.0
seaborn>=0.12.0
jinja2>=3.1.0
schedule>=1.2.0
jsonschema>=4.17.0
"""
        (output_path / "requirements.txt").write_text(requirements_content.strip())
        
        # README.md
        readme_content = f"""
# {config.project_name}

–ü—Ä–æ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ **Claude MultiAgent Framework** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏** - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ MCP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- üö® **–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π** - –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã —Å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
- üíæ **–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
- üìä **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã** - HTML –æ—Ç—á–µ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
- ü§ñ **–ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** - ML-–∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- ‚ö° **–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:**
   ```bash
   pip install -r requirements.txt
   ```

2. **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞:**
   ```python
   from framework_init import initialize_framework
   initialize_framework('{config.project_type}')
   ```

3. **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º:**
   ```python
   # –î–æ–±–∞–≤—å—Ç–µ –≤ –≤–∞—à –∫–æ–¥
   from monitoring.mcp_monitor import track_mcp_call
   
   @track_mcp_call("my_agent", "mcp_server")
   def my_function():
       # –í–∞—à –∫–æ–¥
       pass
   ```

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### üß† –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

–§—Ä–µ–π–º–≤–æ—Ä–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å—É–±-–∞–≥–µ–Ω—Ç—ã:

- **üß† –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä** ‚Äî –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- **üß™ –ò–Ω–∂–µ–Ω–µ—Ä** ‚Äî –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç—ã
- **üì¶ –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä** ‚Äî –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å –≤–Ω–µ—à–Ω–∏–º–∏ API –∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
- **üõ°Ô∏è –ö—Ä–∏—Ç–∏–∫** ‚Äî –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è
- **üß≠ –ú–µ–Ω–µ–¥–∂–µ—Ä** ‚Äî –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏

### üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞

```
{config.project_name}/
‚îú‚îÄ‚îÄ monitoring/          # –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚îú‚îÄ‚îÄ reports/            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
‚îú‚îÄ‚îÄ recommendations/    # –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚îú‚îÄ‚îÄ autonomous/         # –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ
‚îú‚îÄ‚îÄ config/            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îî‚îÄ‚îÄ examples/          # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
```

## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ `config/framework_config.json`:

```json
{{
  "monitoring_enabled": true,
  "alerts_enabled": true,
  "cache_enabled": true,
  "ai_optimization_enabled": true
}}
```

## –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License - —Å–º. LICENSE —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.

---

ü§ñ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ Claude MultiAgent Framework*
"""
        (output_path / "README.md").write_text(readme_content.strip())
    
    def _copy_framework_components(self, output_path: Path, config: TemplateConfig):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        print("üì¶ [–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        project_template = self.analysis_data["template_structure"]["project_types"][config.project_type]
        required_components = project_template["required_components"]
        optional_components = project_template.get("optional_components", [])
        
        all_components = required_components + [c for c in optional_components if c in config.framework_components]
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        for component_name in all_components:
            self._copy_single_component(component_name, output_path)
    
    def _copy_single_component(self, component_name: str, output_path: Path):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        # –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ
        all_components = (self.analysis_data["framework_analysis"]["core_framework_components"] + 
                         self.analysis_data["framework_analysis"]["project_specific_components"])
        
        component_info = None
        for comp in all_components:
            if comp["name"] == component_name:
                component_info = comp
                break
        
        if not component_info:
            print(f"‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        source_path = self.source_root / component_info["path"]
        target_path = output_path / component_info["path"]
        
        target_path.parent.mkdir(parents=True, exist_ok=True)
        
        if source_path.exists():
            # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            with open(source_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            processed_content = self._process_template_variables(content)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(target_path, 'w', encoding='utf-8') as f:
                f.write(processed_content)
            
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {component_info['path']}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_path}")
    
    def _process_template_variables(self, content: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞"""
        processed_content = content
        
        for variable, value in self.template_variables.items():
            processed_content = processed_content.replace(variable, str(value))
        
        return processed_content
    
    def _create_configuration_files(self, output_path: Path, config: TemplateConfig):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("‚öôÔ∏è [–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä] –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        config_dir = output_path / "config"
        config_dir.mkdir(exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
        project_template = self.analysis_data["template_structure"]["project_types"][config.project_type]
        framework_config = {
            "project": {
                "name": config.project_name,
                "type": config.project_type,
                "version": "1.0.0",
                "created": datetime.now().isoformat()
            },
            "framework": project_template["config_params"],
            "custom": config.custom_variables
        }
        
        with open(config_dir / "framework_config.json", 'w', encoding='utf-8') as f:
            json.dump(framework_config, f, ensure_ascii=False, indent=2)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_config = {
            "cache": {
                "max_size_mb": 100,
                "ttl_hours": 24,
                "cleanup_interval_minutes": 60
            },
            "performance": {
                "max_response_time": 10.0,
                "max_tokens_per_request": 1000,
                "tracking_enabled": True
            }
        }
        
        with open(config_dir / "monitoring_config.json", 'w', encoding='utf-8') as f:
            json.dump(monitoring_config, f, ensure_ascii=False, indent=2)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        alert_config = {
            "thresholds": {
                "max_response_time": 10.0,
                "max_tokens_per_request": 1000,
                "min_success_rate": 0.9,
                "max_failure_streak": 3
            },
            "notification": {
                "enabled": True,
                "console_output": True,
                "file_logging": True,
                "email_alerts": False
            },
            "email": {
                "smtp_server": "smtp.gmail.com",
                "smtp_port": 587,
                "username": "",
                "password": "",
                "recipients": []
            }
        }
        
        with open(config_dir / "alert_config.json", 'w', encoding='utf-8') as f:
            json.dump(alert_config, f, ensure_ascii=False, indent=2)
    
    def _create_initialization_scripts(self, output_path: Path, config: TemplateConfig):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        print("üöÄ [–ò–Ω–∂–µ–Ω–µ—Ä] –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        init_script = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Framework Initialization - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {config.project_name}
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ Claude MultiAgent Framework

–ê–≤—Ç–æ—Ä: {self.template_variables["{{AUTHOR}}"]}
–î–∞—Ç–∞: {self.template_variables["{{DATE}}"]}
"""

import json
from pathlib import Path
from typing import Dict, Any

def load_framework_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
    config_file = Path("config/framework_config.json")
    
    if not config_file.exists():
        raise FileNotFoundError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: config/framework_config.json")
    
    with open(config_file, 'r', encoding='utf-8') as f:
        return json.load(f)

def initialize_framework(project_type: str = "{config.project_type}") -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude MultiAgent Framework"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {config.project_name}...")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_framework_config()
        print(f"üìã –ü—Ä–æ–µ–∫—Ç: {{config['project']['name']}}")
        print(f"üè∑Ô∏è –¢–∏–ø: {{config['project']['type']}}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞'''
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        project_template = self.analysis_data["template_structure"]["project_types"][config.project_type]
        required_components = project_template["required_components"]
        
        for component in required_components:
            init_script += f'''
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {component}
        try:
            print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {component}...")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            print(f"‚úÖ {component} –≥–æ—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {component}: {{e}}")
            return False'''
        
        init_script += '''
        
        print("‚úÖ Claude MultiAgent Framework –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def get_framework_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
    return {
        "initialized": True,
        "components_active": [],
        "version": "1.0.0"
    }

if __name__ == "__main__":
    initialize_framework()
'''
        
        (output_path / "framework_init.py").write_text(init_script)
    
    def _create_documentation(self, output_path: Path, config: TemplateConfig):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("üìö [–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä] –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        
        docs_dir = output_path / "docs"
        docs_dir.mkdir(exist_ok=True)
        
        # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        usage_guide = f"""
# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é {config.project_name}

## –û–±–∑–æ—Ä

{config.project_name} —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ **Claude MultiAgent Framework** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.

## –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

### üîç –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö MCP –≤—ã–∑–æ–≤–æ–≤:

```python
from monitoring.mcp_monitor import track_mcp_call

@track_mcp_call("agent_name", "mcp_server")
def my_function():
    # –í–∞—à –∫–æ–¥
    pass
```

### üö® –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:

```json
{{
  "thresholds": {{
    "max_response_time": 10.0,
    "max_tokens_per_request": 1000
  }}
}}
```

### üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–æ–≤ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏:

```python
from reports.auto_reporter import auto_reporter

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
report_path = auto_reporter.generate_daily_report()
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º

1. **–ò–º–ø–æ—Ä—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞:**
   ```python
   from framework_init import initialize_framework
   initialize_framework()
   ```

2. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**
   ```python
   from monitoring.mcp_monitor import mcp_monitor
   
   # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –≤—ã–∑–æ–≤–∞
   mcp_monitor.log_request("agent", "server", "query")
   ```

3. **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞:**
   ```python
   from monitoring.cache_manager import cache_manager
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
   cached_result = cache_manager.get_cached_response("key")
   ```

## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ `config/framework_config.json`.

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
- `monitoring_config.json` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- `alert_config.json` - –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

## –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

–§—Ä–µ–π–º–≤–æ—Ä–∫ –º–æ–∂–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è:

```python
from autonomous.self_optimizer import self_optimizer

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
self_optimizer.continuous_analysis()
```

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Claude MultiAgent Framework.
"""
        
        (docs_dir / "usage_guide.md").write_text(usage_guide.strip())
        
        # API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        api_docs = """
# API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏

### monitoring.mcp_monitor

#### `track_mcp_call(agent: str, server: str)`
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è MCP –≤—ã–∑–æ–≤–æ–≤.

#### `log_request(agent: str, server: str, query: str) -> str`
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É.

### monitoring.performance_tracker

#### `record_performance(agent: str, server: str, **metrics)`
–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

### monitoring.alert_system

#### `check_metrics(agent: str, server: str, metrics: dict)`
–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤.

### autonomous.self_optimizer

#### `continuous_analysis()`
–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.

## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–°–º. –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é `examples/` –¥–ª—è –ø–æ–ª–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.
"""
        
        (docs_dir / "api_reference.md").write_text(api_docs.strip())
    
    def _create_usage_examples(self, output_path: Path, config: TemplateConfig):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        print("üí° [–ò–Ω–∂–µ–Ω–µ—Ä] –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
        
        examples_dir = output_path / "examples"
        examples_dir.mkdir(exist_ok=True)
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        basic_example = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {config.project_name}
"""

from framework_init import initialize_framework
from monitoring.mcp_monitor import track_mcp_call

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
    if not initialize_framework():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    @track_mcp_call("example_agent", "example_server") 
    def example_function():
        print("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
        return "Success"
    
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    result = example_function()
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {{result}}")

if __name__ == "__main__":
    main()
'''
        
        (examples_dir / "basic_usage.py").write_text(basic_example)
        
        # –ü—Ä–∏–º–µ—Ä —Å –æ—Ç—á–µ—Ç–∞–º–∏
        reports_example = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ {config.project_name}
"""

from framework_init import initialize_framework

def generate_reports_example():
    """–ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initialize_framework()
    
    try:
        from reports.auto_reporter import auto_reporter
        
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        daily_report = auto_reporter.generate_daily_report()
        print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: {{daily_report}}")
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç  
        weekly_report = auto_reporter.generate_weekly_report()
        print(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {{weekly_report}}")
        
    except ImportError:
        print("‚ö†Ô∏è –ú–æ–¥—É–ª—å –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞")

if __name__ == "__main__":
    generate_reports_example()
'''
        
        (examples_dir / "reports_example.py").write_text(reports_example)

def create_project_template(project_name: str, project_type: str, 
                          framework_components: List[str] = None,
                          custom_variables: Dict[str, Any] = None,
                          output_directory: str = None) -> str:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    
    if framework_components is None:
        framework_components = []
    
    if custom_variables is None:
        custom_variables = {}
    
    if output_directory is None:
        output_directory = f"generated_projects/{project_name}"
    
    config = TemplateConfig(
        project_name=project_name,
        project_type=project_type,
        framework_components=framework_components,
        custom_variables=custom_variables,
        output_directory=output_directory
    )
    
    generator = TemplateGenerator("/home/dmin/projects/telegram_sticker_bot/telegram_sticker_bot")
    return str(generator.create_universal_template(config))

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞...")
    
    project_path = create_project_template(
        project_name="MyMonitoringProject",
        project_type="full_framework",
        framework_components=["mcp_monitor", "alert_system", "auto_reporter"],
        custom_variables={"email_notifications": True},
        output_directory="universal_template_demo"
    )
    
    print(f"‚úÖ –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω: {project_path}")
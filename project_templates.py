#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Templates - –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è Claude MultiAgent Framework
–ß–∞—Å—Ç—å Claude MultiAgent Framework

–ê–≤—Ç–æ—Ä: Claude MultiAgent System
–î–∞—Ç–∞: 2025-07-11
"""

import json
import shutil
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import os
import subprocess

from config_profiles import ProjectType, ConfigProfileManager, get_config_for_project

@dataclass
class ProjectTemplate:
    """–®–∞–±–ª–æ–Ω –ø—Ä–æ–µ–∫—Ç–∞"""
    name: str
    project_type: ProjectType
    description: str
    structure: Dict[str, List[str]]
    dependencies: List[str]
    dev_dependencies: List[str]
    setup_commands: List[str]
    example_code: Dict[str, str]
    documentation: Dict[str, str]

class ProjectTemplateGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self, framework_source: str):
        self.framework_source = Path(framework_source)
        self.templates_dir = Path("project_templates")
        self.templates_dir.mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        self.templates = self._init_project_templates()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.profile_manager = ConfigProfileManager()
    
    def _init_project_templates(self) -> Dict[str, ProjectTemplate]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        templates = {}
        
        # ===== TELEGRAM BOT TEMPLATE =====
        templates["telegram_bot"] = ProjectTemplate(
            name="Telegram Bot —Å Claude MultiAgent Framework",
            project_type=ProjectType.TELEGRAM_BOT,
            description="Telegram –±–æ—Ç —Å –ø–æ–ª–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π",
            structure={
                "bot/": ["main.py", "handlers.py", "keyboards.py", "states.py"],
                "bot/handlers/": ["start.py", "help.py", "settings.py"],
                "bot/middlewares/": ["monitoring.py", "error_handler.py"],
                "services/": ["user_service.py", "message_service.py"],
                "config/": ["bot_config.py", "framework_config.json"],
                "monitoring/": [],  # –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
                "autonomous/": [],  # –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
                "reports/": [],     # –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
                "locales/": ["ru.json", "en.json"],
                "tests/": ["test_handlers.py", "test_services.py"]
            },
            dependencies=[
                "aiogram>=3.2.0",
                "python-dotenv>=1.0.0",
                "aiosqlite>=0.19.0",
                "asyncpg>=0.28.0",
                "redis>=5.0.0",
                "aiohttp>=3.9.0"
            ],
            dev_dependencies=[
                "pytest>=7.4.0",
                "pytest-asyncio>=0.21.0",
                "black>=23.0.0",
                "flake8>=6.0.0",
                "mypy>=1.0.0"
            ],
            setup_commands=[
                "python -m venv venv",
                "source venv/bin/activate",
                "pip install -r requirements.txt",
                "python framework_init.py",
                "cp .env.example .env"
            ],
            example_code={
                "bot/main.py": '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ —Å Claude MultiAgent Framework
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config.bot_config import BOT_TOKEN
from framework_init import initialize_framework
from bot.middlewares.monitoring import MonitoringMiddleware
from bot.handlers import start, help, settings

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude MultiAgent Framework
    if not initialize_framework("telegram_bot"):
        logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    dp.message.middleware(MonitoringMiddleware())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.include_router(start.router)
    dp.include_router(help.router)
    dp.include_router(settings.router)
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Claude MultiAgent Framework")
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
''',
                "bot/middlewares/monitoring.py": '''# -*- coding: utf-8 -*-
"""
Middleware –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

from aiogram import BaseMiddleware
from typing import Any, Awaitable, Callable, Dict
from aiogram.types import TelegramObject

from monitoring.mcp_monitor import mcp_monitor

class MonitoringMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        agent = "telegram_bot"
        mcp_server = f"handler_{handler.__name__}"
        query = str(event)[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è
        
        request_id = mcp_monitor.log_request(agent, mcp_server, query)
        
        try:
            # –í—ã–∑–æ–≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞
            result = await handler(event, data)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            mcp_monitor.log_response(
                request_id, 
                success=True,
                response_time=0.1,  # TODO: –ó–∞–º–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                tokens_used=0,
                response_size=len(str(result))
            )
            
            return result
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            mcp_monitor.log_response(
                request_id,
                success=False,
                response_time=0.1,
                tokens_used=0,
                response_size=0,
                error_message=str(e)
            )
            raise
'''
            },
            documentation={
                "README.md": """# Telegram Bot —Å Claude MultiAgent Framework

## –û–ø–∏—Å–∞–Ω–∏–µ

Telegram –±–æ—Ç —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- üîç –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∏ middleware
- üö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
- üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
- ü§ñ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

1. –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
2. –°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:
   ```bash
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   venv\\Scripts\\activate     # Windows
   ```

3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   ```bash
   pip install -r requirements.txt
   ```

4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
   ```bash
   cp .env.example .env
   # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ BOT_TOKEN
   ```

5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫:
   ```bash
   python framework_init.py
   ```

6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:
   ```bash
   python bot/main.py
   ```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
- –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
- –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ API

–û—Ç—á–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ `reports/generated/`.

## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

–§—Ä–µ–π–º–≤–æ—Ä–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç:
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
- –ë–∞—Ç—á–∏–Ω–≥ API –≤—ã–∑–æ–≤–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏

## –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:
```bash
pytest tests/
```

–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:
```bash
flake8 bot/
mypy bot/
```
"""
            }
        )
        
        # ===== WEB API TEMPLATE =====
        templates["web_api"] = ProjectTemplate(
            name="Web API —Å Claude MultiAgent Framework",
            project_type=ProjectType.WEB_API,
            description="RESTful API —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            structure={
                "app/": ["main.py", "config.py", "dependencies.py"],
                "app/api/": ["__init__.py", "endpoints.py"],
                "app/api/v1/": ["users.py", "auth.py", "health.py"],
                "app/core/": ["security.py", "database.py", "monitoring.py"],
                "app/models/": ["user.py", "token.py"],
                "app/services/": ["user_service.py", "auth_service.py"],
                "app/middleware/": ["monitoring.py", "error_handler.py", "rate_limiter.py"],
                "monitoring/": [],  # –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
                "reports/": [],     # –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
                "config/": ["api_config.py", "framework_config.json"],
                "tests/": ["test_api.py", "test_services.py"],
                "scripts/": ["migrate.py", "seed.py"]
            },
            dependencies=[
                "fastapi>=0.104.0",
                "uvicorn>=0.24.0",
                "pydantic>=2.0.0",
                "sqlalchemy>=2.0.0",
                "alembic>=1.12.0",
                "python-jose>=3.3.0",
                "passlib>=1.7.4",
                "python-multipart>=0.0.6",
                "httpx>=0.25.0",
                "redis>=5.0.0"
            ],
            dev_dependencies=[
                "pytest>=7.4.0",
                "pytest-asyncio>=0.21.0",
                "httpx>=0.25.0",
                "black>=23.0.0",
                "flake8>=6.0.0",
                "mypy>=1.0.0",
                "coverage>=7.0.0"
            ],
            setup_commands=[
                "python -m venv venv",
                "source venv/bin/activate",
                "pip install -r requirements.txt",
                "python framework_init.py",
                "alembic init alembic",
                "alembic revision --autogenerate -m 'Initial migration'",
                "alembic upgrade head"
            ],
            example_code={
                "app/main.py": '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Claude MultiAgent Framework
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.config import settings
from app.api.v1 import users, auth, health
from app.middleware.monitoring import MonitoringMiddleware
from app.core.database import engine, Base
from framework_init import initialize_framework

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude MultiAgent Framework
initialize_framework("web_api")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    openapi_url=f"{settings.API_V1_STR}/openapi.json"
)

# Middleware
app.add_middleware(MonitoringMiddleware)
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–æ—É—Ç–µ—Ä—ã
app.include_router(health.router, prefix=f"{settings.API_V1_STR}/health", tags=["health"])
app.include_router(auth.router, prefix=f"{settings.API_V1_STR}/auth", tags=["auth"])
app.include_router(users.router, prefix=f"{settings.API_V1_STR}/users", tags=["users"])

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    await engine.dispose()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
''',
                "app/middleware/monitoring.py": '''# -*- coding: utf-8 -*-
"""
Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import time
from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware

from monitoring.mcp_monitor import mcp_monitor
from monitoring.performance_tracker import performance_tracker

class MonitoringMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API"""
    
    async def dispatch(self, request: Request, call_next):
        # –ù–∞—á–∞–ª–æ –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        start_time = time.time()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        agent = "web_api"
        mcp_server = f"{request.method}_{request.url.path}"
        query = f"{request.method} {request.url}"
        
        request_id = mcp_monitor.log_request(agent, mcp_server, query)
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            response = await call_next(request)
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            process_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            mcp_monitor.log_response(
                request_id,
                success=response.status_code < 400,
                response_time=process_time,
                tokens_used=0,
                response_size=int(response.headers.get("content-length", 0))
            )
            
            # –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_tracker.record_performance(
                agent=agent,
                mcp_server=mcp_server,
                query=query,
                response_time=process_time,
                tokens_used=0,
                success=response.status_code < 400
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            response.headers["X-Process-Time"] = str(process_time)
            
            return response
            
        except Exception as e:
            process_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            mcp_monitor.log_response(
                request_id,
                success=False,
                response_time=process_time,
                tokens_used=0,
                response_size=0,
                error_message=str(e)
            )
            
            raise
'''
            },
            documentation={
                "README.md": """# Web API —Å Claude MultiAgent Framework

## –û–ø–∏—Å–∞–Ω–∏–µ

RESTful API –Ω–∞ FastAPI —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- üöÄ –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π API –Ω–∞ FastAPI
- üîç –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö endpoints
- üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- ü§ñ –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
- ‚ö° –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
- üîí –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è JWT

## API Endpoints

- `GET /api/v1/health` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- `POST /api/v1/auth/login` - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- `GET /api/v1/users` - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- `GET /api/v1/users/{id}` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:
- –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∫–∞–∂–¥–æ–≥–æ endpoint
- –°—Ç–∞—Ç—É—Å –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–æ–≤
- –†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
- –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫
- –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ë–î

## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–§—Ä–µ–π–º–≤–æ—Ä–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç:
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
- –ü—É–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
- –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
- –ë–∞—Ç—á–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤
"""
            }
        )
        
        # ===== CLI TOOL TEMPLATE =====
        templates["cli_tool"] = ProjectTemplate(
            name="CLI Tool —Å Claude MultiAgent Framework",
            project_type=ProjectType.CLI_TOOL,
            description="–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            structure={
                "cli/": ["main.py", "commands.py", "utils.py"],
                "cli/commands/": ["init.py", "run.py", "report.py"],
                "monitoring/": [],  # –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
                "config/": ["cli_config.py", "framework_config.json"],
                "tests/": ["test_commands.py", "test_utils.py"]
            },
            dependencies=[
                "click>=8.1.0",
                "rich>=13.0.0",
                "typer>=0.9.0",
                "python-dotenv>=1.0.0"
            ],
            dev_dependencies=[
                "pytest>=7.4.0",
                "black>=23.0.0",
                "flake8>=6.0.0",
                "mypy>=1.0.0"
            ],
            setup_commands=[
                "python -m venv venv",
                "source venv/bin/activate",
                "pip install -r requirements.txt",
                "pip install -e .",
                "python framework_init.py"
            ],
            example_code={
                "cli/main.py": '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Claude MultiAgent Framework
"""

import typer
from rich.console import Console
from rich.table import Table

from framework_init import initialize_framework
from monitoring.mcp_monitor import track_mcp_call
from cli.commands import init, run, report

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = typer.Typer()
console = Console()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
initialize_framework("cli_tool")

@app.command()
@track_mcp_call("cli_tool", "init_command")
def init(name: str = typer.Argument(..., help="–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞")):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    console.print(f"[green]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {name}[/green]")
    # –õ–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    console.print("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!")

@app.command()
@track_mcp_call("cli_tool", "run_command")  
def run(
    script: str = typer.Argument(..., help="–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
):
    """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    if verbose:
        console.print(f"[blue]–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {script}[/blue]")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    console.print("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
    
@app.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    from monitoring.performance_tracker import performance_tracker
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = performance_tracker.get_overall_statistics()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
    
    table.add_row("–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥", str(stats.get("total_requests", 0)))
    table.add_row("–£—Å–ø–µ—à–Ω—ã—Ö", str(stats.get("successful_requests", 0)))
    table.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{stats.get('avg_response_time', 0):.2f}s")
    
    console.print(table)

if __name__ == "__main__":
    app()
'''
            },
            documentation={
                "README.md": """# CLI Tool —Å Claude MultiAgent Framework

## –û–ø–∏—Å–∞–Ω–∏–µ

–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
- üìà –û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

```bash
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
mycli init myproject

# –ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
mycli run script.py --verbose

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
mycli status
```
"""
            }
        )
        
        # ===== ML SERVICE TEMPLATE =====
        templates["ml_service"] = ProjectTemplate(
            name="ML Service —Å Claude MultiAgent Framework",
            project_type=ProjectType.ML_SERVICE,
            description="–°–µ—Ä–≤–∏—Å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –º–æ–¥–µ–ª–µ–π",
            structure={
                "ml_service/": ["app.py", "config.py"],
                "ml_service/models/": ["base_model.py", "predictor.py", "trainer.py"],
                "ml_service/api/": ["inference.py", "training.py", "monitoring.py"],
                "ml_service/data/": ["preprocessor.py", "validator.py"],
                "ml_service/monitoring/": ["model_monitor.py", "drift_detector.py"],
                "monitoring/": [],  # –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
                "autonomous/": [],  # –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
                "models/": ["model_v1.pkl"],
                "data/": ["sample_data.csv"],
                "notebooks/": ["exploration.ipynb", "training.ipynb"],
                "tests/": ["test_models.py", "test_api.py"]
            },
            dependencies=[
                "fastapi>=0.104.0",
                "uvicorn>=0.24.0",
                "scikit-learn>=1.3.0",
                "pandas>=2.0.0",
                "numpy>=1.24.0",
                "torch>=2.0.0",
                "transformers>=4.30.0",
                "mlflow>=2.8.0",
                "evidently>=0.4.0"
            ],
            dev_dependencies=[
                "jupyter>=1.0.0",
                "pytest>=7.4.0",
                "black>=23.0.0",
                "flake8>=6.0.0"
            ],
            setup_commands=[
                "python -m venv venv",
                "source venv/bin/activate",
                "pip install -r requirements.txt",
                "python framework_init.py",
                "mlflow ui --port 5000 &"
            ],
            example_code={
                "ml_service/monitoring/model_monitor.py": '''# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML –º–æ–¥–µ–ª–µ–π —Å Claude MultiAgent Framework
"""

from typing import Dict, Any, List
import numpy as np
from datetime import datetime

from monitoring.mcp_monitor import mcp_monitor
from monitoring.performance_tracker import performance_tracker
from recommendations.optimizer_ai import optimizer_ai

class ModelMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ML –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, model_name: str):
        self.model_name = model_name
        self.predictions_buffer = []
        self.ground_truth_buffer = []
    
    def track_prediction(self, 
                        input_data: np.ndarray,
                        prediction: Any,
                        model_version: str,
                        inference_time: float):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ MCP Monitor
        request_id = mcp_monitor.log_request(
            agent=f"ml_model_{self.model_name}",
            mcp_server=f"inference_v{model_version}",
            query=f"shape={input_data.shape}"
        )
        
        mcp_monitor.log_response(
            request_id=request_id,
            success=True,
            response_time=inference_time,
            tokens_used=int(np.prod(input_data.shape)),  # –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            response_size=1
        )
        
        # –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_tracker.record_performance(
            agent=f"ml_model_{self.model_name}",
            mcp_server=f"inference_v{model_version}",
            query="prediction",
            response_time=inference_time,
            tokens_used=int(np.prod(input_data.shape)),
            success=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥—Ä–µ–π—Ñ–∞
        self.predictions_buffer.append({
            "timestamp": datetime.now(),
            "prediction": prediction,
            "inference_time": inference_time,
            "input_shape": input_data.shape
        })
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        if len(self.predictions_buffer) >= 100:
            self._analyze_model_performance()
    
    def _analyze_model_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –ò–ò
        recommendations = optimizer_ai.generate_model_recommendations(
            model_name=self.model_name,
            predictions=self.predictions_buffer
        )
        
        if recommendations:
            print(f"ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ {self.model_name}:")
            for rec in recommendations:
                print(f"  ‚Ä¢ {rec}")
        
        # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
        self.predictions_buffer = self.predictions_buffer[-50:]
    
    def track_accuracy(self, predictions: List[Any], ground_truth: List[Any]):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        accuracy = sum(p == gt for p, gt in zip(predictions, ground_truth)) / len(predictions)
        
        # –ê–ª–µ—Ä—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if accuracy < 0.8:  # –ü–æ—Ä–æ–≥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            from monitoring.alert_system import alert_system
            alert_system.send_alert(
                severity="HIGH",
                title=f"–ü–∞–¥–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ {self.model_name}",
                message=f"–¢–æ—á–Ω–æ—Å—Ç—å —É–ø–∞–ª–∞ –¥–æ {accuracy:.2%}"
            )
'''
            },
            documentation={
                "README.md": """# ML Service —Å Claude MultiAgent Framework

## –û–ø–∏—Å–∞–Ω–∏–µ

–°–µ—Ä–≤–∏—Å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –º–æ–¥–µ–ª–µ–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ inference –≤—Ä–µ–º–µ–Ω–∏
- üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
- üéØ –î–µ—Ç–µ–∫—Ü–∏—è –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö
- üìà A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
- ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- üîç Explainability –º–µ—Ç—Ä–∏–∫–∏

## API

- `POST /predict` - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
- `GET /model/metrics` - –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏
- `POST /model/feedback` - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
- `GET /model/drift` - –°—Ç–∞—Ç—É—Å –¥—Ä–µ–π—Ñ–∞

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:
- –í—Ä–µ–º—è inference
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU/CPU
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
- –î—Ä–µ–π—Ñ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""
            }
        )
        
        return templates
    
    def generate_project(self, project_name: str, project_type: str,
                        scale: str = "standard", output_dir: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        if output_dir is None:
            output_dir = f"generated_projects/{project_name}"
        
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template = self.templates.get(project_type)
        if not template:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {project_type}")
        
        print(f"üèóÔ∏è [–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
        print(f"   –¢–∏–ø: {project_type}")
        print(f"   –ú–∞—Å—à—Ç–∞–±: {scale}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self._create_project_structure(output_path, template)
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
        self._copy_framework_components(output_path, project_type, scale)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self._create_project_config(output_path, project_name, project_type, scale)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
        self._create_example_code(output_path, template)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self._create_documentation(output_path, template)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        self._create_project_files(output_path, template)
        
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
        return str(output_path)
    
    def _create_project_structure(self, output_path: Path, template: ProjectTemplate):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
        for directory, files in template.structure.items():
            dir_path = output_path / directory.rstrip("/")
            dir_path.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ __init__.py –¥–ª—è Python –ø–∞–∫–µ—Ç–æ–≤
            if directory.endswith("/") and not directory.startswith(("config/", "tests/", "scripts/", "data/", "models/", "notebooks/")):
                init_file = dir_path / "__init__.py"
                if not init_file.exists():
                    init_file.write_text("")
    
    def _copy_framework_components(self, output_path: Path, project_type: str, scale: str):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        config = get_config_for_project(project_type, scale)
        
        if not config:
            return
        
        components = config.get("framework", {}).get("components", {})
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        for component, enabled in components.items():
            if enabled:
                self._copy_component(component, output_path)
    
    def _copy_component(self, component_name: str, output_path: Path):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        component_mappings = {
            "mcp_monitor": "monitoring/mcp_monitor.py",
            "performance_tracker": "monitoring/performance_tracker.py",
            "cache_manager": "monitoring/cache_manager.py",
            "alert_system": "monitoring/alert_system.py",
            "auto_reporter": "reports/auto_reporter.py",
            "optimizer_ai": "recommendations/optimizer_ai.py",
            "self_optimizer": "autonomous/self_optimizer.py",
            "approval_system": "autonomous/approval_system.py",
            "config_updater": "autonomous/config_updater.py"
        }
        
        if component_name in component_mappings:
            source_file = self.framework_source / component_mappings[component_name]
            if source_file.exists():
                target_file = output_path / component_mappings[component_name]
                target_file.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(source_file, target_file)
    
    def _create_project_config(self, output_path: Path, project_name: str,
                              project_type: str, scale: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        config = get_config_for_project(project_type, scale)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
        config["project"] = {
            "name": project_name,
            "type": project_type,
            "scale": scale,
            "created": "2025-07-11",
            "framework_version": "1.0.0"
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_dir = output_path / "config"
        config_dir.mkdir(exist_ok=True)
        
        config_file = config_dir / "framework_config.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
    
    def _create_example_code(self, output_path: Path, template: ProjectTemplate):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞"""
        for file_path, code in template.example_code.items():
            full_path = output_path / file_path
            full_path.parent.mkdir(parents=True, exist_ok=True)
            full_path.write_text(code)
    
    def _create_documentation(self, output_path: Path, template: ProjectTemplate):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        for file_path, content in template.documentation.items():
            full_path = output_path / file_path
            full_path.parent.mkdir(parents=True, exist_ok=True)
            full_path.write_text(content)
    
    def _create_project_files(self, output_path: Path, template: ProjectTemplate):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        # requirements.txt
        requirements = template.dependencies + [
            "# Claude MultiAgent Framework",
            "aiosqlite>=0.19.0",
            "numpy>=1.24.0",
            "scikit-learn>=1.3.0",
            "matplotlib>=3.7.0",
            "jinja2>=3.1.0",
            "schedule>=1.2.0",
            "jsonschema>=4.17.0"
        ]
        
        req_file = output_path / "requirements.txt"
        req_file.write_text("\n".join(requirements))
        
        # requirements-dev.txt
        if template.dev_dependencies:
            dev_req_file = output_path / "requirements-dev.txt"
            dev_req_file.write_text("\n".join(template.dev_dependencies))
        
        # .env.example
        env_example = """# Environment variables
DEBUG=True
LOG_LEVEL=INFO

# API Keys (if needed)
API_KEY=your-api-key-here

# Database (if needed)
DATABASE_URL=sqlite:///./app.db

# Claude MultiAgent Framework
MONITORING_ENABLED=True
ALERTS_ENABLED=True
AI_OPTIMIZATION_ENABLED=True
"""
        (output_path / ".env.example").write_text(env_example)
        
        # .gitignore
        gitignore = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
venv/
env/

# Environment
.env

# Claude MultiAgent Framework
monitoring/performance.db
monitoring/cache/
logs/
reports/generated/
autonomous/optimizations/
autonomous/config_backups/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
*.db
*.log
"""
        (output_path / ".gitignore").write_text(gitignore)
        
        # framework_init.py
        init_script = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude MultiAgent Framework
"""

import json
from pathlib import Path

def initialize_framework(project_type: str = None) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude MultiAgent Framework...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_file = Path("config/framework_config.json")
    if config_file.exists():
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print(f"üìã –ü—Ä–æ–µ–∫—Ç: {config['project']['name']}")
        print(f"üè∑Ô∏è –¢–∏–ø: {config['project']['type']}")
        print(f"üìä –ú–∞—Å—à—Ç–∞–±: {config['project']['scale']}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = config.get('framework', {}).get('components', {})
        for component, enabled in components.items():
            if enabled:
                print(f"‚úÖ {component}: –∞–∫—Ç–∏–≤–µ–Ω")
        
        print("‚úÖ –§—Ä–µ–π–º–≤–æ—Ä–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return True
    else:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

if __name__ == "__main__":
    initialize_framework()
'''
        (output_path / "framework_init.py").write_text(init_script)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
def create_project_from_template(project_name: str, project_type: str,
                               scale: str = "standard") -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    generator = ProjectTemplateGenerator("/home/dmin/projects/telegram_sticker_bot/telegram_sticker_bot")
    return generator.generate_project(project_name, project_type, scale)

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞
    telegram_bot_path = create_project_from_template(
        "MyAwesomeBot",
        "telegram_bot",
        "advanced"
    )
    
    print(f"\n‚úÖ Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω: {telegram_bot_path}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Web API
    web_api_path = create_project_from_template(
        "MyAPI",
        "web_api", 
        "standard"
    )
    
    print(f"\n‚úÖ Web API —Å–æ–∑–¥–∞–Ω: {web_api_path}")
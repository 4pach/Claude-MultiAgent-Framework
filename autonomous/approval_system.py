#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Approval System - –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
–ß–∞—Å—Ç—å Claude MultiAgent Framework

–ê–≤—Ç–æ—Ä: Claude MultiAgent System
–î–∞—Ç–∞: 2025-07-11
"""

import json
import time
import threading
from datetime import datetime
from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass, asdict
from pathlib import Path
from enum import Enum
import hashlib

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å–∞–º–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
from autonomous.self_optimizer import OptimizationProposal, OptimizationType, OptimizationSeverity

class ApprovalDecision(Enum):
    """–†–µ—à–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    APPROVE = "approve"
    REJECT = "reject" 
    DEFER = "defer"
    REQUEST_INFO = "request_info"

@dataclass
class ApprovalRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    proposal_id: str
    proposal: OptimizationProposal
    requested_at: datetime
    expires_at: datetime
    status: str = "pending"  # pending, approved, rejected, deferred, expired
    decision_reason: Optional[str] = None
    decided_at: Optional[datetime] = None

class ApprovalInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, approval_dir: str = "autonomous/approvals"):
        self.approval_dir = Path(approval_dir)
        self.approval_dir.mkdir(exist_ok=True)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        self.pending_approvals: Dict[str, ApprovalRequest] = {}
        self.approval_history: List[ApprovalRequest] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.config = self.load_approval_config()
        
        # Callbacks –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.approval_callbacks: List[Callable] = []
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        self.auto_approval_rules = self.init_auto_approval_rules()
        
        print("‚úÖ Approval System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_approval_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        config_file = self.approval_dir / "approval_config.json"
        
        default_config = {
            "interface": {
                "auto_show_proposals": True,
                "detailed_impact_analysis": True,
                "confirmation_timeout_hours": 24,
                "max_pending_proposals": 10
            },
            "auto_approval": {
                "enabled": True,
                "low_risk_auto_approve": True,
                "performance_improvement_threshold": 15.0,  # %
                "max_auto_approve_per_hour": 3
            },
            "notification": {
                "show_proposal_details": True,
                "highlight_risks": True,
                "show_rollback_plan": True
            },
            "display": {
                "use_emojis": True,
                "color_coding": True,
                "compact_mode": False
            }
        }
        
        if config_file.exists():
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    for key, value in default_config.items():
                        if key not in loaded_config:
                            loaded_config[key] = value
                    return loaded_config
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, ensure_ascii=False, indent=2)
        
        return default_config
    
    def init_auto_approval_rules(self) -> List[Dict]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if not self.config["auto_approval"]["enabled"]:
            return []
        
        rules = []
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∏–∑–∫–æ—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        if self.config["auto_approval"]["low_risk_auto_approve"]:
            rules.append({
                "name": "low_risk_auto_approve",
                "condition": lambda proposal: (
                    proposal.severity == OptimizationSeverity.LOW and
                    proposal.confidence_score > 0.8 and
                    "cache" in proposal.type.value
                ),
                "max_per_hour": 5
            })
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        rules.append({
            "name": "high_performance_gain",
            "condition": lambda proposal: (
                proposal.estimated_impact.get("performance_improvement", 0) > 
                self.config["auto_approval"]["performance_improvement_threshold"] and
                proposal.confidence_score > 0.9
            ),
            "max_per_hour": 2
        })
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        rules.append({
            "name": "critical_fixes",
            "condition": lambda proposal: (
                "error" in proposal.description.lower() or
                "fix" in proposal.description.lower() and
                proposal.severity in [OptimizationSeverity.HIGH, OptimizationSeverity.CRITICAL]
            ),
            "max_per_hour": 1
        })
        
        return rules
    
    def request_approval(self, proposal: OptimizationProposal) -> str:
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        request_id = f"approval_{proposal.id}_{int(time.time())}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        auto_decision = self.check_auto_approval(proposal)
        if auto_decision:
            return self.process_auto_approval(proposal, auto_decision, request_id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        approval_request = ApprovalRequest(
            proposal_id=proposal.id,
            proposal=proposal,
            requested_at=datetime.now(),
            expires_at=proposal.expires_at
        )
        
        self.pending_approvals[request_id] = approval_request
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if self.config["interface"]["auto_show_proposals"]:
            self.display_proposal(approval_request)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ callback'–æ–≤
        for callback in self.approval_callbacks:
            try:
                callback(approval_request)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ approval callback: {e}")
        
        return request_id
    
    def check_auto_approval(self, proposal: OptimizationProposal) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if not self.config["auto_approval"]["enabled"]:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        current_hour = datetime.now().hour
        auto_approvals_this_hour = len([
            req for req in self.approval_history 
            if (req.decided_at and 
                req.decided_at.hour == current_hour and 
                req.status == "approved")
        ])
        
        if auto_approvals_this_hour >= self.config["auto_approval"]["max_auto_approve_per_hour"]:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        for rule in self.auto_approval_rules:
            try:
                if rule["condition"](proposal):
                    rule_approvals_this_hour = len([
                        req for req in self.approval_history
                        if (req.decided_at and 
                            req.decided_at.hour == current_hour and
                            req.status == "approved" and
                            req.decision_reason == f"auto:{rule['name']}")
                    ])
                    
                    if rule_approvals_this_hour < rule.get("max_per_hour", 1):
                        return f"auto:{rule['name']}"
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª–µ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {rule['name']}: {e}")
        
        return None
    
    def process_auto_approval(self, proposal: OptimizationProposal, 
                            auto_reason: str, request_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        approval_request = ApprovalRequest(
            proposal_id=proposal.id,
            proposal=proposal,
            requested_at=datetime.now(),
            expires_at=proposal.expires_at,
            status="approved",
            decision_reason=auto_reason,
            decided_at=datetime.now()
        )
        
        self.approval_history.append(approval_request)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        print(f"ü§ñ –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {proposal.title}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {auto_reason}")
        print(f"   Confidence: {proposal.confidence_score:.1%}")
        
        return request_id
    
    def display_proposal(self, request: ApprovalRequest):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        proposal = request.proposal
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        severity_emoji = {
            OptimizationSeverity.LOW: "üíö",
            OptimizationSeverity.MEDIUM: "üíõ", 
            OptimizationSeverity.HIGH: "üß°",
            OptimizationSeverity.CRITICAL: "üî¥"
        }
        
        type_emoji = {
            OptimizationType.CONFIG_UPDATE: "‚öôÔ∏è",
            OptimizationType.CACHE_OPTIMIZATION: "üíæ",
            OptimizationType.THRESHOLD_ADJUSTMENT: "üìä",
            OptimizationType.RESOURCE_REALLOCATION: "üîÑ",
            OptimizationType.ALERT_RULE_UPDATE: "üö®",
            OptimizationType.PERFORMANCE_TUNING: "‚ö°"
        }
        
        emoji = severity_emoji.get(proposal.severity, "‚ö†Ô∏è")
        type_icon = type_emoji.get(proposal.type, "üîß")
        
        print(f"\n{emoji} === –ó–ê–ü–†–û–° –ù–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ ===")
        print(f"{type_icon} **{proposal.title}**")
        print(f"üìù {proposal.description}")
        print(f"üéØ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {proposal.rationale}")
        
        # –î–µ—Ç–∞–ª–∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if self.config["interface"]["detailed_impact_analysis"]:
            print(f"\nüìà **–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:**")
            for metric, value in proposal.estimated_impact.items():
                if value > 0:
                    print(f"  ‚Ä¢ {metric}: +{value:.1f}")
            
            print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {proposal.confidence_score:.1%}")
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
        if proposal.changes and not self.config["display"]["compact_mode"]:
            print(f"\nüîß **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**")
            for key, value in proposal.changes.items():
                print(f"  ‚Ä¢ {key}: {value}")
        
        # –ü–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞
        if self.config["notification"]["show_rollback_plan"]:
            print(f"\nüîô **–ü–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞:** {proposal.rollback_plan}")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
        if self.config["notification"]["highlight_risks"]:
            risk_level = {
                OptimizationSeverity.LOW: "–ù–∏–∑–∫–∏–π",
                OptimizationSeverity.MEDIUM: "–°—Ä–µ–¥–Ω–∏–π",
                OptimizationSeverity.HIGH: "–í—ã—Å–æ–∫–∏–π", 
                OptimizationSeverity.CRITICAL: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
            }
            print(f"‚ö†Ô∏è **–†–∏—Å–∫:** {risk_level.get(proposal.severity, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            print(f"üõ°Ô∏è **–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:** {proposal.risk_assessment}")
        
        # –°—Ä–æ–∫–∏
        expires_in = (proposal.expires_at - datetime.now()).total_seconds() / 3600
        print(f"‚è∞ **–°—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è:** {expires_in:.1f} —á–∞—Å–æ–≤")
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        print(f"\nüéÆ **–ö–æ–º–∞–Ω–¥—ã:**")
        print(f"  approve('{request.proposal_id}') - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        print(f"  reject('{request.proposal_id}') - –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
        print(f"  defer('{request.proposal_id}') - –û—Ç–ª–æ–∂–∏—Ç—å")
        print(f"  info('{request.proposal_id}') - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        print("="*60)
    
    def approve_proposal(self, proposal_id: str, reason: str = "") -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        request = self.find_pending_request(proposal_id)
        if not request:
            print(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return False
        
        request.status = "approved"
        request.decision_reason = reason or "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        request.decided_at = datetime.now()
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.approval_history.append(request)
        del self.pending_approvals[proposal_id]
        
        print(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {request.proposal.title}")
        
        return True
    
    def reject_proposal(self, proposal_id: str, reason: str = "") -> bool:
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        request = self.find_pending_request(proposal_id)
        if not request:
            print(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return False
        
        request.status = "rejected"
        request.decision_reason = reason or "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        request.decided_at = datetime.now()
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.approval_history.append(request)
        del self.pending_approvals[proposal_id]
        
        print(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {request.proposal.title}")
        
        return True
    
    def defer_proposal(self, proposal_id: str, reason: str = "") -> bool:
        """–û—Ç–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é"""
        request = self.find_pending_request(proposal_id)
        if not request:
            print(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return False
        
        # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –Ω–∞ 24 —á–∞—Å–∞
        from datetime import timedelta
        request.expires_at = datetime.now() + timedelta(hours=24)
        request.decision_reason = reason or "–û—Ç–ª–æ–∂–µ–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"
        
        print(f"‚è∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ 24 —á–∞—Å–∞: {request.proposal.title}")
        
        return True
    
    def request_additional_info(self, proposal_id: str) -> bool:
        """–ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é"""
        request = self.find_pending_request(proposal_id)
        if not request:
            print(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        proposal = request.proposal
        
        print(f"\nüìã === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===")
        print(f"üÜî ID: {proposal.id}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {proposal.created_at}")
        print(f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {proposal.expires_at}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        print(f"\nüîç **–î–µ—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**")
        for key, value in proposal.changes.items():
            print(f"  ‚Ä¢ {key}:")
            if isinstance(value, dict):
                for subkey, subvalue in value.items():
                    print(f"    - {subkey}: {subvalue}")
            else:
                print(f"    {value}")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
        print(f"\nüíæ **–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞:**")
        for key, value in proposal.backup_data.items():
            print(f"  ‚Ä¢ {key}: {value}")
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
        print(f"  ‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º: {proposal.type.value}")
        print(f"  ‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {proposal.severity.value}")
        print(f"  ‚Ä¢ –•–µ—à: {hashlib.md5(proposal.id.encode()).hexdigest()[:8]}")
        
        return True
    
    def find_pending_request(self, proposal_id: str) -> Optional[ApprovalRequest]:
        """–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        for request_id, request in self.pending_approvals.items():
            if request.proposal_id == proposal_id:
                return request
        return None
    
    def get_pending_approvals(self) -> List[ApprovalRequest]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        return list(self.pending_approvals.values())
    
    def cleanup_expired_requests(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = datetime.now()
        expired_requests = []
        
        for request_id, request in list(self.pending_approvals.items()):
            if current_time > request.expires_at:
                request.status = "expired"
                request.decided_at = current_time
                request.decision_reason = "–°—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫"
                
                self.approval_history.append(request)
                expired_requests.append(request)
                del self.pending_approvals[request_id]
        
        if expired_requests:
            print(f"‚è∞ –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–ª—è {len(expired_requests)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        
        return len(expired_requests)
    
    def get_approval_statistics(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        total_requests = len(self.approval_history)
        
        if total_requests == 0:
            return {"total": 0, "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"}
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        auto_approvals = 0
        
        for request in self.approval_history:
            status_counts[request.status] = status_counts.get(request.status, 0) + 1
            if request.decision_reason and request.decision_reason.startswith("auto:"):
                auto_approvals += 1
        
        # –°—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        decision_times = []
        for request in self.approval_history:
            if request.decided_at and request.status != "expired":
                delta = request.decided_at - request.requested_at
                decision_times.append(delta.total_seconds() / 3600)  # –≤ —á–∞—Å–∞—Ö
        
        avg_decision_time = sum(decision_times) / len(decision_times) if decision_times else 0
        
        return {
            "total_requests": total_requests,
            "pending": len(self.pending_approvals),
            "status_breakdown": status_counts,
            "auto_approvals": auto_approvals,
            "auto_approval_rate": auto_approvals / total_requests if total_requests > 0 else 0,
            "avg_decision_time_hours": avg_decision_time,
            "recent_activity": len([r for r in self.approval_history 
                                  if (datetime.now() - r.requested_at).days < 7])
        }
    
    def add_approval_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        self.approval_callbacks.append(callback)
    
    def save_approval_state(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"approval_state_{timestamp}.json"
        filepath = self.approval_dir / filename
        
        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = {
            'saved_at': datetime.now().isoformat(),
            'pending_approvals': {
                req_id: {
                    'proposal_id': req.proposal_id,
                    'proposal': asdict(req.proposal),
                    'requested_at': req.requested_at.isoformat(),
                    'expires_at': req.expires_at.isoformat(),
                    'status': req.status
                }
                for req_id, req in self.pending_approvals.items()
            },
            'approval_history_count': len(self.approval_history),
            'statistics': self.get_approval_statistics()
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(state_data, f, ensure_ascii=False, indent=2, default=str)
        
        return str(filepath)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
approval_interface = ApprovalInterface()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def approve(proposal_id: str, reason: str = "") -> bool:
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    return approval_interface.approve_proposal(proposal_id, reason)

def reject(proposal_id: str, reason: str = "") -> bool:
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    return approval_interface.reject_proposal(proposal_id, reason)

def defer(proposal_id: str, reason: str = "") -> bool:
    """–û—Ç–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é"""
    return approval_interface.defer_proposal(proposal_id, reason)

def info(proposal_id: str) -> bool:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"""
    return approval_interface.request_additional_info(proposal_id)

def show_pending() -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    pending = approval_interface.get_pending_approvals()
    
    if not pending:
        print("üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return
    
    print(f"\nüìã === –û–ñ–ò–î–ê–Æ–©–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø ({len(pending)}) ===")
    for request in pending:
        approval_interface.display_proposal(request)

def approval_stats() -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
    stats = approval_interface.get_approval_statistics()
    
    print("\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ô ===")
    print(f"üì• –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    print(f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: {stats['pending']}")
    
    if stats.get('status_breakdown'):
        print("\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        status_emoji = {
            'approved': '‚úÖ',
            'rejected': '‚ùå', 
            'deferred': '‚è∞',
            'expired': '‚åõ'
        }
        for status, count in stats['status_breakdown'].items():
            emoji = status_emoji.get(status, 'üìã')
            print(f"  {emoji} {status}: {count}")
    
    if stats['auto_approvals'] > 0:
        print(f"\nü§ñ –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {stats['auto_approvals']} "
              f"({stats['auto_approval_rate']:.1%})")
    
    if stats['avg_decision_time_hours'] > 0:
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {stats['avg_decision_time_hours']:.1f} —á–∞—Å–æ–≤")
    
    print("="*50)

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    print("‚úÖ Approval System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    print("\nüéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  show_pending() - –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    print("  approve(id, reason) - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    print("  reject(id, reason) - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ") 
    print("  defer(id, reason) - –û—Ç–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
    print("  info(id) - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    print("  approval_stats() - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
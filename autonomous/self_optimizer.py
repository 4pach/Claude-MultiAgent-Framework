#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Self Optimizer - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ß–∞—Å—Ç—å Claude MultiAgent Framework

–ê–≤—Ç–æ—Ä: Claude MultiAgent System
–î–∞—Ç–∞: 2025-07-11
"""

import json
import asyncio
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, asdict
from pathlib import Path
from enum import Enum
import hashlib

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
from monitoring.mcp_monitor import mcp_monitor
from monitoring.performance_tracker import performance_tracker
from monitoring.cache_manager import cache_manager
from monitoring.alert_system import alert_system
from recommendations.optimizer_ai import optimizer_ai

class OptimizationType(Enum):
    """–¢–∏–ø—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    CONFIG_UPDATE = "config_update"
    CACHE_OPTIMIZATION = "cache_optimization"
    THRESHOLD_ADJUSTMENT = "threshold_adjustment"
    RESOURCE_REALLOCATION = "resource_reallocation"
    ALERT_RULE_UPDATE = "alert_rule_update"
    PERFORMANCE_TUNING = "performance_tuning"

class OptimizationSeverity(Enum):
    """–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    LOW = "low"           # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    MEDIUM = "medium"     # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ
    HIGH = "high"         # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ  
    CRITICAL = "critical" # –¢—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è + –±—ç–∫–∞–ø

@dataclass
class OptimizationProposal:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    id: str
    type: OptimizationType
    severity: OptimizationSeverity
    title: str
    description: str
    rationale: str
    changes: Dict[str, Any]
    backup_data: Dict[str, Any]
    estimated_impact: Dict[str, float]
    risk_assessment: str
    rollback_plan: str
    confidence_score: float
    created_at: datetime
    expires_at: datetime
    approved: Optional[bool] = None
    applied: bool = False
    applied_at: Optional[datetime] = None

class SelfOptimizer:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
    
    def __init__(self, optimization_dir: str = "autonomous/optimizations"):
        self.optimization_dir = Path(optimization_dir)
        self.optimization_dir.mkdir(exist_ok=True)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        self.pending_proposals: Dict[str, OptimizationProposal] = {}
        self.applied_optimizations: List[OptimizationProposal] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–º–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.config = self.load_config()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        self.optimization_history = []
        self.performance_baseline = {}
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safety
        self.lock = threading.Lock()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_thread = threading.Thread(target=self.continuous_analysis, daemon=True)
        self.analysis_thread.start()
        
        # Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_approval_callback: Optional[Callable] = None
        
        print("ü§ñ Self Optimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–º–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        config_file = self.optimization_dir / "self_optimizer_config.json"
        
        default_config = {
            "enabled": True,
            "analysis_interval_minutes": 30,
            "auto_apply_threshold": 0.9,  # Confidence score –¥–ª—è –∞–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            "max_pending_proposals": 10,
            "proposal_expiry_hours": 24,
            "optimization_categories": {
                "cache": {"enabled": True, "auto_apply": True},
                "thresholds": {"enabled": True, "auto_apply": False},
                "config": {"enabled": True, "auto_apply": False},
                "resources": {"enabled": True, "auto_apply": False}
            },
            "safety_limits": {
                "max_cache_size_mb": 500,
                "min_success_rate": 0.8,
                "max_response_time": 30.0,
                "max_daily_optimizations": 5
            }
        }
        
        if config_file.exists():
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    return {**default_config, **loaded_config}
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, ensure_ascii=False, indent=2)
        
        return default_config
    
    def set_user_approval_callback(self, callback: Callable[[OptimizationProposal], bool]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_approval_callback = callback
        print("‚úÖ Callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def continuous_analysis(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        while True:
            try:
                if not self.config["enabled"]:
                    time.sleep(300)  # 5 –º–∏–Ω—É—Ç –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω
                    continue
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self.analyze_performance_metrics()
                
                # –ê–Ω–∞–ª–∏–∑ –∫—ç—à–∞
                self.analyze_cache_efficiency()
                
                # –ê–Ω–∞–ª–∏–∑ –∞–ª–µ—Ä—Ç–æ–≤
                self.analyze_alert_patterns()
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
                self.apply_automatic_optimizations()
                
                # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                self.cleanup_expired_proposals()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                interval = self.config["analysis_interval_minutes"] * 60
                time.sleep(interval)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
                time.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def analyze_performance_metrics(self):
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –ò–ò
            ai_recommendations = optimizer_ai.generate_comprehensive_recommendations()
            
            for ai_rec in ai_recommendations[:3]:  # –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                proposal = self.create_proposal_from_ai_recommendation(ai_rec)
                if proposal:
                    self.add_optimization_proposal(proposal)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.analyze_performance_trends()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def create_proposal_from_ai_recommendation(self, ai_rec) -> Optional[OptimizationProposal]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        proposal_id = f"AI_{ai_rec.id}_{int(time.time())}"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if "token" in ai_rec.description.lower():
            opt_type = OptimizationType.THRESHOLD_ADJUSTMENT
        elif "cache" in ai_rec.description.lower():
            opt_type = OptimizationType.CACHE_OPTIMIZATION
        elif "server" in ai_rec.description.lower():
            opt_type = OptimizationType.CONFIG_UPDATE
        else:
            opt_type = OptimizationType.PERFORMANCE_TUNING
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        if ai_rec.priority >= 4:
            severity = OptimizationSeverity.HIGH
        elif ai_rec.priority >= 3:
            severity = OptimizationSeverity.MEDIUM
        else:
            severity = OptimizationSeverity.LOW
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        changes = self.generate_changes_from_ai_rec(ai_rec)
        if not changes:
            return None
        
        return OptimizationProposal(
            id=proposal_id,
            type=opt_type,
            severity=severity,
            title=f"–ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {ai_rec.title}",
            description=ai_rec.description,
            rationale=f"–ò–ò-–∞–Ω–∞–ª–∏–∑ –≤—ã—è–≤–∏–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è —Å confidence score {ai_rec.confidence_score:.2f}",
            changes=changes,
            backup_data=self.create_backup_data(changes),
            estimated_impact=ai_rec.estimated_savings,
            risk_assessment=self.assess_risk(changes, severity),
            rollback_plan=self.generate_rollback_plan(changes),
            confidence_score=ai_rec.confidence_score,
            created_at=datetime.now(),
            expires_at=datetime.now() + timedelta(hours=self.config["proposal_expiry_hours"])
        )
    
    def generate_changes_from_ai_rec(self, ai_rec) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        changes = {}
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if "token" in ai_rec.description.lower() and ai_rec.mcp_server:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
            current_limit = 1000  # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            new_limit = max(500, int(current_limit * 0.8))
            changes = {
                "file": ".mcp.json",
                "path": f"mcpServers.{ai_rec.mcp_server}.token_limit",
                "old_value": current_limit,
                "new_value": new_limit,
                "action": "update_config"
            }
        
        elif "cache" in ai_rec.description.lower():
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
            changes = {
                "action": "optimize_cache",
                "operations": ["cleanup_expired", "adjust_ttl", "improve_quality_threshold"],
                "target_hit_rate": 0.7
            }
        
        elif "response time" in ai_rec.description.lower() and ai_rec.mcp_server:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
            changes = {
                "file": ".mcp.json",
                "path": f"mcpServers.{ai_rec.mcp_server}.timeout",
                "old_value": 30000,
                "new_value": 20000,
                "action": "update_timeout"
            }
        
        return changes
    
    def analyze_cache_efficiency(self):
        """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
        try:
            cache_stats = cache_manager.get_cache_statistics()
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (cache_stats.hit_rate > 0.8 and 
                cache_stats.space_efficiency > 0.9 and
                cache_stats.total_size_mb < self.config["safety_limits"]["max_cache_size_mb"]):
                
                proposal = OptimizationProposal(
                    id=f"CACHE_EXPAND_{int(time.time())}",
                    type=OptimizationType.CACHE_OPTIMIZATION,
                    severity=OptimizationSeverity.LOW,
                    title="–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞",
                    description=f"–í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞ ({cache_stats.hit_rate:.1%}), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞",
                    rationale=f"Hit rate {cache_stats.hit_rate:.1%}, space efficiency {cache_stats.space_efficiency:.1%}",
                    changes={
                        "action": "increase_cache_size",
                        "current_size": cache_stats.total_size_mb,
                        "new_size": min(cache_stats.total_size_mb * 1.5, 
                                      self.config["safety_limits"]["max_cache_size_mb"])
                    },
                    backup_data={"current_cache_config": "backup_saved"},
                    estimated_impact={"cache_hit_rate": 0.05, "response_time": -0.5},
                    risk_assessment="–ù–∏–∑–∫–∏–π - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
                    rollback_plan="–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–∞–∑–º–µ—Ä—É –∫—ç—à–∞",
                    confidence_score=0.85,
                    created_at=datetime.now(),
                    expires_at=datetime.now() + timedelta(hours=12)
                )
                
                self.add_optimization_proposal(proposal)
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            elif cache_stats.hit_rate < 0.3 and cache_stats.total_entries > 50:
                proposal = OptimizationProposal(
                    id=f"CACHE_CLEANUP_{int(time.time())}",
                    type=OptimizationType.CACHE_OPTIMIZATION,
                    severity=OptimizationSeverity.LOW,
                    title="–û—á–∏—Å—Ç–∫–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—ç—à–∞",
                    description=f"–ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞ ({cache_stats.hit_rate:.1%}), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞",
                    rationale=f"Hit rate {cache_stats.hit_rate:.1%} –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ {self.config['safety_limits']['min_success_rate']}",
                    changes={
                        "action": "optimize_cache",
                        "operations": ["cleanup_expired", "remove_low_quality", "adjust_ttl"]
                    },
                    backup_data={"cache_backup": "created"},
                    estimated_impact={"cache_efficiency": 0.2, "memory_usage": -20},
                    risk_assessment="–ù–∏–∑–∫–∏–π - —É–ª—É—á—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                    rollback_plan="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞",
                    confidence_score=0.9,
                    created_at=datetime.now(),
                    expires_at=datetime.now() + timedelta(hours=6)
                )
                
                self.add_optimization_proposal(proposal)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—ç—à–∞: {e}")
    
    def analyze_alert_patterns(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            active_alerts = alert_system.get_active_alerts()
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∞–ª–µ—Ä—Ç–æ–≤
            alert_counts = {}
            for alert in alert_system.alerts_history[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∞–ª–µ—Ä—Ç–æ–≤
                key = f"{alert.type.value}_{alert.mcp_server}"
                alert_counts[key] = alert_counts.get(key, 0) + 1
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            for alert_key, count in alert_counts.items():
                if count >= 5:  # –ß–∞—Å—Ç—ã–µ –∞–ª–µ—Ä—Ç—ã
                    alert_type, server = alert_key.split("_", 1)
                    
                    proposal = self.create_alert_optimization_proposal(alert_type, server, count)
                    if proposal:
                        self.add_optimization_proposal(proposal)
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def create_alert_optimization_proposal(self, alert_type: str, server: str, count: int) -> Optional[OptimizationProposal]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        proposal_id = f"ALERT_OPT_{alert_type}_{server}_{int(time.time())}"
        
        if alert_type == "performance_degradation":
            return OptimizationProposal(
                id=proposal_id,
                type=OptimizationType.THRESHOLD_ADJUSTMENT,
                severity=OptimizationSeverity.MEDIUM,
                title=f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è {server}",
                description=f"–ß–∞—Å—Ç—ã–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({count} —Ä–∞–∑), –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞",
                rationale=f"–°–µ—Ä–≤–µ—Ä {server} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {count} –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                changes={
                    "action": "adjust_threshold",
                    "server": server,
                    "threshold_type": "response_time",
                    "current_threshold": 10.0,
                    "new_threshold": 12.0
                },
                backup_data={"old_threshold": 10.0},
                estimated_impact={"alert_reduction": count * 0.7},
                risk_assessment="–°—Ä–µ–¥–Ω–∏–π - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                rollback_plan="–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ—Ä–æ–≥—É",
                confidence_score=0.75,
                created_at=datetime.now(),
                expires_at=datetime.now() + timedelta(hours=18)
            )
        
        return None
    
    def analyze_performance_trends(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
            servers = performance_tracker.get_all_servers()
            
            for server in servers:
                analysis = performance_tracker.get_server_performance(server, days=3)
                
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞
                if (analysis.trend_direction == 'degrading' and 
                    analysis.efficiency_score < 70):
                    
                    proposal = OptimizationProposal(
                        id=f"TREND_OPT_{server}_{int(time.time())}",
                        type=OptimizationType.PERFORMANCE_TUNING,
                        severity=OptimizationSeverity.HIGH,
                        title=f"–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ {server}",
                        description=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (efficiency: {analysis.efficiency_score:.1f}%)",
                        rationale=f"–¢—Ä–µ–Ω–¥: {analysis.trend_direction}, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∑–∏–ª–∞—Å—å",
                        changes={
                            "action": "performance_intervention",
                            "server": server,
                            "interventions": ["restart_connection", "clear_cache", "reduce_load"]
                        },
                        backup_data={"server_state": "backed_up"},
                        estimated_impact={"efficiency_improvement": 20.0},
                        risk_assessment="–í—ã—Å–æ–∫–∏–π - –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞",
                        rollback_plan="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                        confidence_score=0.8,
                        created_at=datetime.now(),
                        expires_at=datetime.now() + timedelta(hours=6)
                    )
                    
                    self.add_optimization_proposal(proposal)
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
    
    def add_optimization_proposal(self, proposal: OptimizationProposal):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        with self.lock:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if len(self.pending_proposals) >= self.config["max_pending_proposals"]:
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                oldest_low_priority = None
                for prop in self.pending_proposals.values():
                    if prop.severity == OptimizationSeverity.LOW:
                        if oldest_low_priority is None or prop.created_at < oldest_low_priority.created_at:
                            oldest_low_priority = prop
                
                if oldest_low_priority:
                    del self.pending_proposals[oldest_low_priority.id]
                else:
                    print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            proposal_hash = self.calculate_proposal_hash(proposal)
            for existing in self.pending_proposals.values():
                if self.calculate_proposal_hash(existing) == proposal_hash:
                    print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {proposal.title}")
                    return
            
            self.pending_proposals[proposal.id] = proposal
            print(f"üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {proposal.title}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            if self.should_auto_apply(proposal):
                self.apply_optimization(proposal.id, auto_applied=True)
    
    def calculate_proposal_hash(self, proposal: OptimizationProposal) -> str:
        """–†–∞—Å—á–µ—Ç —Ö—ç—à–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        content = f"{proposal.type.value}_{proposal.title}_{json.dumps(proposal.changes, sort_keys=True)}"
        return hashlib.md5(content.encode()).hexdigest()
    
    def should_auto_apply(self, proposal: OptimizationProposal) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not self.config["enabled"]:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        today_optimizations = sum(1 for opt in self.applied_optimizations 
                                if opt.applied_at and opt.applied_at.date() == datetime.now().date())
        
        if today_optimizations >= self.config["safety_limits"]["max_daily_optimizations"]:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        if proposal.severity in [OptimizationSeverity.HIGH, OptimizationSeverity.CRITICAL]:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ confidence score
        if proposal.confidence_score < self.config["auto_apply_threshold"]:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_config = self.config["optimization_categories"]
        
        if proposal.type == OptimizationType.CACHE_OPTIMIZATION:
            return category_config["cache"]["auto_apply"]
        elif proposal.type == OptimizationType.THRESHOLD_ADJUSTMENT:
            return category_config["thresholds"]["auto_apply"]
        elif proposal.type == OptimizationType.CONFIG_UPDATE:
            return category_config["config"]["auto_apply"]
        
        return False
    
    def apply_automatic_optimizations(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        with self.lock:
            auto_applicable = [
                proposal for proposal in self.pending_proposals.values()
                if self.should_auto_apply(proposal) and not proposal.applied
            ]
            
            for proposal in auto_applicable:
                try:
                    self.apply_optimization(proposal.id, auto_applied=True)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {proposal.id}: {e}")
    
    def request_user_approval(self, proposal: OptimizationProposal) -> bool:
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.user_approval_callback is None:
            print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è: {proposal.title}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {proposal.description}")
            print(f"   –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {proposal.severity.value}")
            print(f"   Confidence: {proposal.confidence_score:.2f}")
            
            # –ü—Ä–æ—Å—Ç–æ–π –≤–≤–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            response = input("   –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é? (y/n): ").lower().strip()
            return response == 'y'
        
        return self.user_approval_callback(proposal)
    
    def apply_optimization(self, proposal_id: str, auto_applied: bool = False) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if proposal_id not in self.pending_proposals:
            print(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {proposal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        proposal = self.pending_proposals[proposal_id]
        
        if proposal.applied:
            print(f"‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {proposal_id} —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            return False
        
        # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if not auto_applied and proposal.severity in [OptimizationSeverity.HIGH, OptimizationSeverity.CRITICAL]:
            if not self.request_user_approval(proposal):
                proposal.approved = False
                print(f"‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {proposal_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return False
        
        proposal.approved = True
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
            self.create_backup(proposal)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            success = self.execute_optimization_changes(proposal)
            
            if success:
                proposal.applied = True
                proposal.applied_at = datetime.now()
                self.applied_optimizations.append(proposal)
                del self.pending_proposals[proposal_id]
                
                apply_method = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" if auto_applied else "—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"
                print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ {apply_method}: {proposal.title}")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
                self.save_optimization_history()
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {proposal_id}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {proposal_id}: {e}")
            return False
    
    def execute_optimization_changes(self, proposal: OptimizationProposal) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            changes = proposal.changes
            action = changes.get("action")
            
            if action == "optimize_cache":
                return self.apply_cache_optimization(changes)
            elif action == "update_config":
                return self.apply_config_update(changes)
            elif action == "adjust_threshold":
                return self.apply_threshold_adjustment(changes)
            elif action == "increase_cache_size":
                return self.apply_cache_size_increase(changes)
            elif action == "performance_intervention":
                return self.apply_performance_intervention(changes)
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            return False
    
    def apply_cache_optimization(self, changes: Dict[str, Any]) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞"""
        try:
            operations = changes.get("operations", [])
            
            for operation in operations:
                if operation == "cleanup_expired":
                    removed = cache_manager.cleanup_expired()
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞: {removed}")
                
                elif operation == "remove_low_quality":
                    # –ò–º–∏—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    print("üîß –£–¥–∞–ª–µ–Ω—ã –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞")
                
                elif operation == "adjust_ttl":
                    print("‚è∞ TTL –∫—ç—à–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")
            return False
    
    def apply_config_update(self, changes: Dict[str, Any]) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            file_path = changes.get("file")
            config_path = changes.get("path")
            new_value = changes.get("new_value")
            
            print(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {file_path}:{config_path} -> {new_value}")
            # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def apply_threshold_adjustment(self, changes: Dict[str, Any]) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–æ–≤"""
        try:
            server = changes.get("server")
            threshold_type = changes.get("threshold_type")
            new_threshold = changes.get("new_threshold")
            
            print(f"üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ {threshold_type} –¥–ª—è {server}: {new_threshold}")
            # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–æ–≤: {e}")
            return False
    
    def apply_cache_size_increase(self, changes: Dict[str, Any]) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞"""
        try:
            new_size = changes.get("new_size")
            print(f"üíæ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –¥–æ {new_size} –ú–ë")
            # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            return False
    
    def apply_performance_intervention(self, changes: Dict[str, Any]) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        try:
            server = changes.get("server")
            interventions = changes.get("interventions", [])
            
            for intervention in interventions:
                print(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {intervention} –¥–ª—è {server}")
                # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {e}")
            return False
    
    def create_backup_data(self, changes: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–∞"""
        backup = {
            "timestamp": datetime.now().isoformat(),
            "changes": changes
        }
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        action = changes.get("action")
        
        if action == "update_config":
            backup["config_backup"] = "–ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω"
        elif action == "optimize_cache":
            backup["cache_backup"] = "–ë—ç–∫–∞–ø –∫—ç—à–∞ —Å–æ–∑–¥–∞–Ω"
        
        return backup
    
    def create_backup(self, proposal: OptimizationProposal):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        backup_dir = self.optimization_dir / "backups"
        backup_dir.mkdir(exist_ok=True)
        
        backup_file = backup_dir / f"backup_{proposal.id}.json"
        
        backup_data = {
            "proposal_id": proposal.id,
            "timestamp": datetime.now().isoformat(),
            "backup_data": proposal.backup_data,
            "original_changes": proposal.changes
        }
        
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}")
    
    def assess_risk(self, changes: Dict[str, Any], severity: OptimizationSeverity) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        action = changes.get("action", "")
        
        if severity == OptimizationSeverity.CRITICAL:
            return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π - –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã"
        elif severity == OptimizationSeverity.HIGH:
            return "–í—ã—Å–æ–∫–∏–π - —Ç—Ä–µ–±—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
        elif action in ["optimize_cache", "cleanup_expired"]:
            return "–ù–∏–∑–∫–∏–π - —É–ª—É—á—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        elif action in ["update_config", "adjust_threshold"]:
            return "–°—Ä–µ–¥–Ω–∏–π - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π - —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
    
    def generate_rollback_plan(self, changes: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –æ—Ç–∫–∞—Ç–∞"""
        action = changes.get("action", "")
        
        if action == "optimize_cache":
            return "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏–∑ –±—ç–∫–∞–ø–∞"
        elif action == "update_config":
            file_path = changes.get("file", "config")
            return f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {file_path} –∏–∑ –±—ç–∫–∞–ø–∞"
        elif action == "adjust_threshold":
            return "–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ—Ä–æ–≥–æ–≤"
        else:
            return "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞"
    
    def cleanup_expired_proposals(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        with self.lock:
            now = datetime.now()
            expired_ids = [
                proposal_id for proposal_id, proposal in self.pending_proposals.items()
                if proposal.expires_at < now
            ]
            
            for proposal_id in expired_ids:
                del self.pending_proposals[proposal_id]
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {proposal_id}")
    
    def save_optimization_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        history_file = self.optimization_dir / "optimization_history.json"
        
        history_data = {
            "last_updated": datetime.now().isoformat(),
            "total_applied": len(self.applied_optimizations),
            "applied_optimizations": [asdict(opt) for opt in self.applied_optimizations[-50:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
        }
        
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump(history_data, f, ensure_ascii=False, indent=2, default=str)
    
    def get_pending_proposals(self) -> List[OptimizationProposal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        return list(self.pending_proposals.values())
    
    def get_optimization_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        pending_count = len(self.pending_proposals)
        applied_count = len(self.applied_optimizations)
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
        type_counts = {}
        for proposal in self.applied_optimizations:
            type_counts[proposal.type.value] = type_counts.get(proposal.type.value, 0) + 1
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        severity_counts = {}
        for proposal in self.pending_proposals.values():
            severity_counts[proposal.severity.value] = severity_counts.get(proposal.severity.value, 0) + 1
        
        return {
            "pending_proposals": pending_count,
            "applied_optimizations": applied_count,
            "optimization_types": type_counts,
            "pending_by_severity": severity_counts,
            "auto_apply_enabled": self.config["enabled"],
            "daily_limit": self.config["safety_limits"]["max_daily_optimizations"]
        }
    
    def print_status_report(self):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
        stats = self.get_optimization_statistics()
        
        print("\nü§ñ === –°–¢–ê–¢–£–° SELF OPTIMIZER ===")
        print(f"üìä –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {stats['pending_proposals']}")
        print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats['applied_optimizations']}")
        print(f"üîß –ê–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if stats['auto_apply_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}")
        
        if stats['pending_by_severity']:
            print("\nüìã –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:")
            severity_names = {"low": "üü¢ –ù–∏–∑–∫–∞—è", "medium": "üü° –°—Ä–µ–¥–Ω—è—è", "high": "üß° –í—ã—Å–æ–∫–∞—è", "critical": "üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞—è"}
            for severity, count in stats['pending_by_severity'].items():
                print(f"  {severity_names.get(severity, severity)}: {count}")
        
        if stats['optimization_types']:
            print("\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–æ —Ç–∏–ø–∞–º:")
            for opt_type, count in stats['optimization_types'].items():
                print(f"  ‚Ä¢ {opt_type}: {count}")
        
        print("="*40)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
self_optimizer = SelfOptimizer()

def get_pending_optimizations() -> List[OptimizationProposal]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    return self_optimizer.get_pending_proposals()

def apply_optimization_by_id(proposal_id: str) -> bool:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ ID"""
    return self_optimizer.apply_optimization(proposal_id)

def set_user_approval_callback(callback: Callable[[OptimizationProposal], bool]):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    self_optimizer.set_user_approval_callback(callback)

def print_optimizer_status():
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    self_optimizer.print_status_report()

def get_optimization_statistics() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    return self_optimizer.get_optimization_statistics()

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    print("ü§ñ Self Optimizer –∑–∞–ø—É—â–µ–Ω")
    
    # –ü—Ä–∏–º–µ—Ä callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    def approval_callback(proposal: OptimizationProposal) -> bool:
        print(f"üîî –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {proposal.title}")
        print(f"   –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {proposal.severity.value}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {proposal.description}")
        return True  # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
    
    set_user_approval_callback(approval_callback)
    
    # –í—ã–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    print_optimizer_status()
    
    print("üîÑ –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞...")
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Config Updater - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
–ß–∞—Å—Ç—å Claude MultiAgent Framework

–ê–≤—Ç–æ—Ä: Claude MultiAgent System
–î–∞—Ç–∞: 2025-07-11
"""

import json
import shutil
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable, Union
from dataclasses import dataclass, asdict
from pathlib import Path
from enum import Enum
import hashlib
import jsonschema
from jsonschema import validate, ValidationError

class ConfigUpdateType(Enum):
    """–¢–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    THRESHOLD_ADJUSTMENT = "threshold_adjustment"
    CACHE_SETTINGS = "cache_settings" 
    ALERT_RULES = "alert_rules"
    PERFORMANCE_TUNING = "performance_tuning"
    MONITORING_CONFIG = "monitoring_config"
    REPORT_SETTINGS = "report_settings"

class UpdateStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    PENDING = "pending"
    VALIDATING = "validating"
    APPLYING = "applying"
    APPLIED = "applied"
    FAILED = "failed"
    ROLLED_BACK = "rolled_back"

@dataclass
class ConfigBackup:
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    backup_id: str
    config_file: str
    original_content: Dict[str, Any]
    backup_timestamp: datetime
    applied_changes: Dict[str, Any]
    checksum: str

@dataclass 
class ConfigUpdate:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    update_id: str
    config_file: str
    update_type: ConfigUpdateType
    changes: Dict[str, Any]
    validation_schema: Optional[Dict] = None
    rollback_timeout: timedelta = timedelta(minutes=30)
    status: UpdateStatus = UpdateStatus.PENDING
    created_at: datetime = None
    applied_at: Optional[datetime] = None
    backup_id: Optional[str] = None
    error_message: Optional[str] = None

class ConfigValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.schemas = self.init_validation_schemas()
    
    def init_validation_schemas(self) -> Dict[str, Dict]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        return {
            "monitoring/mcp_monitor_config.json": {
                "type": "object",
                "properties": {
                    "cache": {
                        "type": "object",
                        "properties": {
                            "max_size_mb": {"type": "number", "minimum": 1, "maximum": 1000},
                            "ttl_hours": {"type": "number", "minimum": 0.1, "maximum": 168}
                        }
                    },
                    "performance": {
                        "type": "object", 
                        "properties": {
                            "max_response_time": {"type": "number", "minimum": 1, "maximum": 300},
                            "max_tokens_per_request": {"type": "integer", "minimum": 50, "maximum": 5000}
                        }
                    }
                }
            },
            "monitoring/alert_config.json": {
                "type": "object",
                "properties": {
                    "thresholds": {
                        "type": "object",
                        "properties": {
                            "max_response_time": {"type": "number", "minimum": 1, "maximum": 60},
                            "max_tokens_per_request": {"type": "integer", "minimum": 100, "maximum": 2000},
                            "min_success_rate": {"type": "number", "minimum": 0.5, "maximum": 1.0}
                        }
                    }
                }
            },
            "reports/report_config.json": {
                "type": "object", 
                "properties": {
                    "schedule": {
                        "type": "object",
                        "properties": {
                            "daily_report": {"type": "string", "pattern": "^[0-2][0-9]:[0-5][0-9]$"},
                            "weekly_report": {"type": "string"},
                            "monthly_report": {"type": "string"}
                        }
                    }
                }
            }
        }
    
    def validate_config(self, config_file: str, config_data: Dict) -> tuple[bool, Optional[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ö–µ–º–µ"""
        schema = self.schemas.get(config_file)
        if not schema:
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if not isinstance(config_data, dict):
                return False, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º JSON"
            return True, None
        
        try:
            validate(instance=config_data, schema=schema)
            return True, None
        except ValidationError as e:
            return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.message}"
    
    def validate_business_logic(self, config_file: str, config_data: Dict) -> tuple[bool, Optional[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
        if "alert_config.json" in config_file:
            thresholds = config_data.get("thresholds", {})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä–æ–≥–æ–≤
            max_response = thresholds.get("max_response_time", 10)
            max_tokens = thresholds.get("max_tokens_per_request", 1000)
            
            if max_response < 1:
                return False, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã"
            
            if max_tokens < 50:
                return False, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 50"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        elif "mcp_monitor_config.json" in config_file:
            cache_config = config_data.get("cache", {})
            
            max_size = cache_config.get("max_size_mb", 100)
            ttl_hours = cache_config.get("ttl_hours", 24)
            
            if max_size > 500:
                return False, "–†–∞–∑–º–µ—Ä –∫—ç—à–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500MB –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
            
            if ttl_hours > 168:  # 7 –¥–Ω–µ–π
                return False, "TTL –∫—ç—à–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 7 –¥–Ω–µ–π"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        elif "report_config.json" in config_file:
            schedule = config_data.get("schedule", {})
            daily_time = schedule.get("daily_report", "09:00")
            
            try:
                hour, minute = map(int, daily_time.split(":"))
                if hour < 0 or hour > 23 or minute < 0 or minute > 59:
                    return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
            except ValueError:
                return False, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM"
        
        return True, None

class ConfigUpdater:
    """–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    
    def __init__(self, config_dir: str = ".", backup_dir: str = "autonomous/config_backups"):
        self.config_dir = Path(config_dir)
        self.backup_dir = Path(backup_dir)
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        self.active_updates: Dict[str, ConfigUpdate] = {}
        self.backups: Dict[str, ConfigBackup] = {}
        
        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        self.validator = ConfigValidator()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.config = self.load_updater_config()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
        self.rollback_monitor = threading.Thread(target=self._rollback_monitor, daemon=True)
        self.rollback_monitor.start()
        
        # Callbacks –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.update_callbacks: List[Callable] = []
        
        print("üîß Config Updater –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_updater_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        config_file = self.backup_dir / "updater_config.json"
        
        default_config = {
            "safety": {
                "require_validation": True,
                "auto_rollback_on_error": True,
                "max_concurrent_updates": 3,
                "backup_retention_days": 30
            },
            "validation": {
                "strict_mode": True,
                "business_logic_checks": True,
                "dry_run_before_apply": True
            },
            "monitoring": {
                "track_performance_impact": True,
                "alert_on_config_errors": True,
                "log_all_changes": True
            }
        }
        
        if config_file.exists():
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    for key, value in default_config.items():
                        if key not in loaded_config:
                            loaded_config[key] = value
                    return loaded_config
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ updater: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, ensure_ascii=False, indent=2)
        
        return default_config
    
    def create_backup(self, config_file: str, applied_changes: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = self.config_dir / config_file
        
        if not config_path.exists():
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
        
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        with open(config_path, 'r', encoding='utf-8') as f:
            original_content = json.load(f)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ ID –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ç–∫–∞–ø–∞
        backup_id = f"backup_{config_file.replace('/', '_')}_{int(time.time())}"
        timestamp = datetime.now()
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        content_str = json.dumps(original_content, sort_keys=True)
        checksum = hashlib.sha256(content_str.encode()).hexdigest()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup = ConfigBackup(
            backup_id=backup_id,
            config_file=config_file,
            original_content=original_content,
            backup_timestamp=timestamp,
            applied_changes=applied_changes,
            checksum=checksum
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ –¥–∏—Å–∫
        backup_file = self.backup_dir / f"{backup_id}.json"
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump({
                'metadata': asdict(backup),
                'original_content': original_content
            }, f, ensure_ascii=False, indent=2, default=str)
        
        self.backups[backup_id] = backup
        
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_id}")
        return backup_id
    
    def apply_config_update(self, update: ConfigUpdate) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            update.status = UpdateStatus.VALIDATING
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_id = self.create_backup(update.config_file, update.changes)
            update.backup_id = backup_id
            
            config_path = self.config_dir / update.config_file
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            with open(config_path, 'r', encoding='utf-8') as f:
                current_config = json.load(f)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            updated_config = self._apply_changes(current_config, update.changes)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if self.config["validation"]["require_validation"]:
                is_valid, error_msg = self.validator.validate_config(
                    update.config_file, updated_config
                )
                if not is_valid:
                    update.status = UpdateStatus.FAILED
                    update.error_message = f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã: {error_msg}"
                    return False
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
                if self.config["validation"]["business_logic_checks"]:
                    is_valid, error_msg = self.validator.validate_business_logic(
                        update.config_file, updated_config
                    )
                    if not is_valid:
                        update.status = UpdateStatus.FAILED
                        update.error_message = f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏: {error_msg}"
                        return False
            
            # Dry run —Ä–µ–∂–∏–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.config["validation"]["dry_run_before_apply"]:
                print(f"üß™ Dry run –¥–ª—è {update.config_file}: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            update.status = UpdateStatus.APPLYING
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            temp_file = config_path.with_suffix('.tmp')
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(updated_config, f, ensure_ascii=False, indent=2)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–∞
            shutil.move(str(temp_file), str(config_path))
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            update.status = UpdateStatus.APPLIED
            update.applied_at = datetime.now()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {update.config_file}")
            self._notify_callbacks(update)
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
            if self.config["safety"]["auto_rollback_on_error"]:
                self.active_updates[update.update_id] = update
            
            return True
            
        except Exception as e:
            update.status = UpdateStatus.FAILED
            update.error_message = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def _apply_changes(self, config: Dict[str, Any], changes: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        updated_config = config.copy()
        
        for path, value in changes.items():
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "cache.max_size_mb")
            keys = path.split('.')
            current = updated_config
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            for key in keys[:-1]:
                if key not in current:
                    current[key] = {}
                current = current[key]
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            final_key = keys[-1]
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if isinstance(value, dict) and '_operation' in value:
                operation = value['_operation']
                actual_value = value['value']
                
                if operation == 'increment':
                    current[final_key] = current.get(final_key, 0) + actual_value
                elif operation == 'multiply':
                    current[final_key] = current.get(final_key, 1) * actual_value
                elif operation == 'append':
                    if final_key not in current:
                        current[final_key] = []
                    current[final_key].append(actual_value)
                else:
                    current[final_key] = actual_value
            else:
                current[final_key] = value
        
        return updated_config
    
    def rollback_update(self, update_id: str) -> bool:
        """–û—Ç–∫–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if update_id not in self.active_updates:
            print(f"‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return False
        
        update = self.active_updates[update_id]
        
        if not update.backup_id or update.backup_id not in self.backups:
            print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è {update_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        try:
            backup = self.backups[update.backup_id]
            config_path = self.config_dir / update.config_file
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(backup.original_content, f, ensure_ascii=False, indent=2)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            update.status = UpdateStatus.ROLLED_BACK
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            del self.active_updates[update_id]
            
            print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {update.config_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")
            return False
    
    def _rollback_monitor(self):
        """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–∞—Ç–∞"""
        while True:
            try:
                current_time = datetime.now()
                expired_updates = []
                
                for update_id, update in self.active_updates.items():
                    if (update.applied_at and 
                        current_time - update.applied_at > update.rollback_timeout):
                        expired_updates.append(update_id)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                for update_id in expired_updates:
                    update = self.active_updates[update_id]
                    print(f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {update.config_file}")
                    self.rollback_update(update_id)
                
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –æ—Ç–∫–∞—Ç–∞: {e}")
                time.sleep(60)
    
    def create_config_update(self, config_file: str, update_type: ConfigUpdateType,
                           changes: Dict[str, Any], rollback_timeout: timedelta = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if len(self.active_updates) >= self.config["safety"]["max_concurrent_updates"]:
            raise RuntimeError("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        update_id = f"update_{config_file.replace('/', '_')}_{int(time.time())}"
        
        update = ConfigUpdate(
            update_id=update_id,
            config_file=config_file,
            update_type=update_type,
            changes=changes,
            rollback_timeout=rollback_timeout or timedelta(minutes=30),
            created_at=datetime.now()
        )
        
        return update_id, update
    
    def execute_config_update(self, config_file: str, update_type: ConfigUpdateType,
                            changes: Dict[str, Any], rollback_timeout: timedelta = None) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_id, update = self.create_config_update(
                config_file, update_type, changes, rollback_timeout
            )
            
            print(f"üîß –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file}")
            print(f"   –¢–∏–ø: {update_type.value}")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏—è: {len(changes)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            success = self.apply_config_update(update)
            
            if success:
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if self.config["monitoring"]["log_all_changes"]:
                    self._log_config_change(update)
                
                return True
            else:
                print(f"‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update_id} –Ω–µ —É–¥–∞–ª–æ—Å—å: {update.error_message}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def _log_config_change(self, update: ConfigUpdate):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        log_file = Path("logs") / "config_changes.log"
        log_file.parent.mkdir(exist_ok=True)
        
        log_entry = {
            'timestamp': update.applied_at.isoformat() if update.applied_at else None,
            'update_id': update.update_id,
            'config_file': update.config_file,
            'update_type': update.update_type.value,
            'changes': update.changes,
            'status': update.status.value,
            'backup_id': update.backup_id
        }
        
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(log_entry, ensure_ascii=False, default=str) + '\n')
    
    def _notify_callbacks(self, update: ConfigUpdate):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ callback'–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for callback in self.update_callbacks:
            try:
                callback(update)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ config update callback: {e}")
    
    def add_update_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö"""
        self.update_callbacks.append(callback)
    
    def get_active_updates(self) -> List[ConfigUpdate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        return list(self.active_updates.values())
    
    def get_backup_history(self, config_file: Optional[str] = None) -> List[ConfigBackup]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        backups = list(self.backups.values())
        
        if config_file:
            backups = [b for b in backups if b.config_file == config_file]
        
        return sorted(backups, key=lambda b: b.backup_timestamp, reverse=True)
    
    def cleanup_old_backups(self, days: int = None):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        days = days or self.config["safety"]["backup_retention_days"]
        cutoff_date = datetime.now() - timedelta(days=days)
        
        old_backups = []
        for backup_id, backup in list(self.backups.items()):
            if backup.backup_timestamp < cutoff_date:
                old_backups.append(backup_id)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                backup_file = self.backup_dir / f"{backup_id}.json"
                if backup_file.exists():
                    backup_file.unlink()
                
                del self.backups[backup_id]
        
        if old_backups:
            print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(old_backups)} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        
        return len(old_backups)
    
    def get_config_update_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        total_backups = len(self.backups)
        active_updates = len(self.active_updates)
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –ª–æ–≥–æ–≤
        log_file = Path("logs") / "config_changes.log"
        recent_updates = 0
        successful_updates = 0
        
        if log_file.exists():
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        entry = json.loads(line.strip())
                        if entry.get('timestamp'):
                            timestamp = datetime.fromisoformat(entry['timestamp'])
                            if (datetime.now() - timestamp).days < 7:
                                recent_updates += 1
                                if entry.get('status') == 'applied':
                                    successful_updates += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤: {e}")
        
        return {
            'total_backups': total_backups,
            'active_updates': active_updates,
            'recent_updates_7d': recent_updates,
            'successful_updates_7d': successful_updates,
            'success_rate': successful_updates / max(recent_updates, 1),
            'backup_retention_days': self.config["safety"]["backup_retention_days"]
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
config_updater = ConfigUpdater()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def update_cache_settings(max_size_mb: int = None, ttl_hours: float = None) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∞"""
    changes = {}
    if max_size_mb is not None:
        changes["cache.max_size_mb"] = max_size_mb
    if ttl_hours is not None:
        changes["cache.ttl_hours"] = ttl_hours
    
    if not changes:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return False
    
    return config_updater.execute_config_update(
        "monitoring/mcp_monitor_config.json",
        ConfigUpdateType.CACHE_SETTINGS,
        changes
    )

def update_alert_thresholds(max_response_time: float = None, 
                          max_tokens: int = None,
                          min_success_rate: float = None) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    changes = {}
    if max_response_time is not None:
        changes["thresholds.max_response_time"] = max_response_time
    if max_tokens is not None:
        changes["thresholds.max_tokens_per_request"] = max_tokens
    if min_success_rate is not None:
        changes["thresholds.min_success_rate"] = min_success_rate
    
    if not changes:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return False
    
    return config_updater.execute_config_update(
        "monitoring/alert_config.json",
        ConfigUpdateType.ALERT_RULES,
        changes
    )

def update_report_schedule(daily_time: str = None, 
                         weekly_day: str = None,
                         monthly_day: str = None) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
    changes = {}
    if daily_time is not None:
        changes["schedule.daily_report"] = daily_time
    if weekly_day is not None:
        changes["schedule.weekly_report"] = weekly_day
    if monthly_day is not None:
        changes["schedule.monthly_report"] = monthly_day
    
    if not changes:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return False
    
    return config_updater.execute_config_update(
        "reports/report_config.json",
        ConfigUpdateType.REPORT_SETTINGS,
        changes
    )

def rollback_config(update_id: str) -> bool:
    """–û—Ç–∫–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ ID –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    return config_updater.rollback_update(update_id)

def show_active_updates():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    updates = config_updater.get_active_updates()
    
    if not updates:
        print("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    print(f"\nüîß === –ê–ö–¢–ò–í–ù–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø ({len(updates)}) ===")
    for update in updates:
        status_emoji = {
            UpdateStatus.PENDING: "‚è≥",
            UpdateStatus.VALIDATING: "üîç", 
            UpdateStatus.APPLYING: "‚öôÔ∏è",
            UpdateStatus.APPLIED: "‚úÖ",
            UpdateStatus.FAILED: "‚ùå"
        }
        
        emoji = status_emoji.get(update.status, "‚ùì")
        age = (datetime.now() - update.created_at).total_seconds() / 60
        
        print(f"{emoji} {update.update_id}")
        print(f"   üìÅ {update.config_file}")
        print(f"   üè∑Ô∏è {update.update_type.value}")
        print(f"   ‚è∞ {age:.1f} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥")
        if update.applied_at:
            timeout_in = (update.applied_at + update.rollback_timeout - datetime.now()).total_seconds() / 60
            print(f"   üîÑ –û—Ç–∫–∞—Ç —á–µ—Ä–µ–∑: {timeout_in:.1f} –º–∏–Ω—É—Ç")
        print()

def config_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    stats = config_updater.get_config_update_stats()
    
    print("\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ===")
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {stats['total_backups']}")
    print(f"üîß –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {stats['active_updates']}")
    print(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ 7 –¥–Ω–µ–π: {stats['recent_updates_7d']}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {stats['successful_updates_7d']}")
    print(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1%}")
    print(f"üóÇÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ø–∏–π: {stats['backup_retention_days']} –¥–Ω–µ–π")
    print("="*45)

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    print("üîß Config Updater –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    print("\nüéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  update_cache_settings(max_size_mb, ttl_hours)")
    print("  update_alert_thresholds(max_response_time, max_tokens, min_success_rate)")
    print("  update_report_schedule(daily_time, weekly_day, monthly_day)")
    print("  rollback_config(update_id)")
    print("  show_active_updates()")
    print("  config_stats()")
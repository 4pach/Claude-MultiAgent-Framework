#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Claude MultiAgent Framework Installer
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞

–ê–≤—Ç–æ—Ä: Claude MultiAgent System
–î–∞—Ç–∞: 2025-07-11
"""

import os
import sys
import subprocess
import platform
import shutil
import json
import urllib.request
import zipfile
import tempfile
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
import argparse

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def colorize(text: str, color: str) -> str:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫ —Ç–µ–∫—Å—Ç—É"""
    return f"{color}{text}{Colors.END}"

class FrameworkInstaller:
    """–ò–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä Claude MultiAgent Framework"""
    
    def __init__(self):
        self.system_info = self._detect_system()
        self.installation_dir = None
        self.project_name = None
        self.project_type = None
        self.project_scale = None
        self.install_mode = "interactive"  # interactive, silent, config
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.config = {
            "create_venv": True,
            "install_dependencies": True,
            "initialize_git": True,
            "create_example": True,
            "run_tests": False
        }
    
    def _detect_system(self) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        return {
            "os": platform.system(),
            "arch": platform.machine(),
            "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
            "platform": platform.platform(),
            "python_executable": sys.executable
        }
    
    def print_banner(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞"""
        banner = f"""
{colorize('‚ïî' + '‚ïê' * 60 + '‚ïó', Colors.CYAN)}
{colorize('‚ïë', Colors.CYAN)} {colorize('Claude MultiAgent Framework Installer', Colors.BOLD + Colors.WHITE)} {colorize('‚ïë', Colors.CYAN)}
{colorize('‚ïë', Colors.CYAN)} {' ' * 26} v1.0.0 {' ' * 26} {colorize('‚ïë', Colors.CYAN)}
{colorize('‚ïö' + '‚ïê' * 60 + '‚ïù', Colors.CYAN)}

{colorize('ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', Colors.WHITE)}
{colorize('   –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò', Colors.WHITE)}

{colorize('–°–∏—Å—Ç–µ–º–∞:', Colors.YELLOW)} {self.system_info['os']} {self.system_info['arch']}
{colorize('Python:', Colors.YELLOW)} {self.system_info['python_version']}
"""
        print(banner)
    
    def check_prerequisites(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        print(f"\n{colorize('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...', Colors.BLUE)}")
        
        requirements_met = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
        if sys.version_info < (3, 8):
            print(f"{colorize('‚ùå Python 3.8+ —Ç—Ä–µ–±—É–µ—Ç—Å—è', Colors.RED)} (—Ç–µ–∫—É—â–∞—è: {self.system_info['python_version']})")
            requirements_met = False
        else:
            print(f"{colorize('‚úÖ Python –≤–µ—Ä—Å–∏—è', Colors.GREEN)}: {self.system_info['python_version']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
        try:
            subprocess.run([sys.executable, "-m", "pip", "--version"], 
                         check=True, capture_output=True)
            print(f"{colorize('‚úÖ pip –¥–æ—Å—Ç—É–ø–µ–Ω', Colors.GREEN)}")
        except subprocess.CalledProcessError:
            print(f"{colorize('‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω', Colors.RED)}")
            requirements_met = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ git (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            subprocess.run(["git", "--version"], check=True, capture_output=True)
            print(f"{colorize('‚úÖ git –¥–æ—Å—Ç—É–ø–µ–Ω', Colors.GREEN)}")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print(f"{colorize('‚ö†Ô∏è git –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)', Colors.YELLOW)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (–º–∏–Ω–∏–º—É–º 100MB)
        if shutil.disk_usage(".")[2] < 100 * 1024 * 1024:
            print(f"{colorize('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞', Colors.RED)} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 100MB)")
            requirements_met = False
        else:
            print(f"{colorize('‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞', Colors.GREEN)}")
        
        return requirements_met
    
    def interactive_setup(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        print(f"\n{colorize('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', Colors.BLUE)}")
        
        # –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
        while True:
            self.project_name = input(f"{colorize('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞:', Colors.CYAN)} ").strip()
            if self.project_name and self.project_name.replace("_", "").replace("-", "").isalnum():
                break
            print(f"{colorize('‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -', Colors.RED)}")
        
        # –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
        project_types = {
            "1": ("telegram_bot", "Telegram Bot"),
            "2": ("web_api", "Web API"),
            "3": ("cli_tool", "CLI Tool"),
            "4": ("data_pipeline", "Data Pipeline"),
            "5": ("microservice", "Microservice"),
            "6": ("ml_service", "ML Service"),
            "7": ("desktop_app", "Desktop App"),
            "8": ("iot_device", "IoT Device")
        }
        
        print(f"\n{colorize('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:', Colors.CYAN)}")
        for key, (code, name) in project_types.items():
            print(f"  {key}. {name}")
        
        while True:
            choice = input(f"{colorize('–í–∞—à –≤—ã–±–æ—Ä (1-8):', Colors.CYAN)} ").strip()
            if choice in project_types:
                self.project_type = project_types[choice][0]
                break
            print(f"{colorize('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 8', Colors.RED)}")
        
        # –ú–∞—Å—à—Ç–∞–± –ø—Ä–æ–µ–∫—Ç–∞
        scales = {
            "1": ("minimal", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (–±–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)"),
            "2": ("standard", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ + –∞–ª–µ—Ä—Ç—ã)"),
            "3": ("advanced", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (+ –ò–ò –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)"),
            "4": ("enterprise", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π (–ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)")
        }
        
        print(f"\n{colorize('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–± –ø—Ä–æ–µ–∫—Ç–∞:', Colors.CYAN)}")
        for key, (code, name) in scales.items():
            print(f"  {key}. {name}")
        
        while True:
            choice = input(f"{colorize('–í–∞—à –≤—ã–±–æ—Ä (1-4):', Colors.CYAN)} ").strip()
            if choice in scales:
                self.project_scale = scales[choice][0]
                break
            print(f"{colorize('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4', Colors.RED)}")
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        default_dir = os.path.join(os.getcwd(), self.project_name)
        install_dir = input(f"{colorize('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏', Colors.CYAN)} [{default_dir}]: ").strip()
        self.installation_dir = Path(install_dir) if install_dir else Path(default_dir)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        print(f"\n{colorize('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:', Colors.CYAN)}")
        
        self.config["create_venv"] = self._ask_yes_no(
            "–°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ?", True
        )
        
        self.config["install_dependencies"] = self._ask_yes_no(
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?", True
        )
        
        self.config["initialize_git"] = self._ask_yes_no(
            "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π?", True
        )
        
        self.config["create_example"] = self._ask_yes_no(
            "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã?", True
        )
        
        self.config["run_tests"] = self._ask_yes_no(
            "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏?", False
        )
    
    def _ask_yes_no(self, question: str, default: bool = True) -> bool:
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–∞/–Ω–µ—Ç"""
        default_str = "Y/n" if default else "y/N"
        response = input(f"{question} [{default_str}]: ").strip().lower()
        
        if not response:
            return default
        
        return response in ['y', 'yes', '–¥–∞', '–¥']
    
    def create_project_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print(f"\n{colorize('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...', Colors.BLUE)}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.installation_dir.mkdir(parents=True, exist_ok=True)
        print(f"{colorize('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', Colors.GREEN)} {self.installation_dir}")
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤
        try:
            # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            sys.path.append(str(Path(__file__).parent))
            from project_templates import create_project_from_template
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            project_path = create_project_from_template(
                self.project_name,
                self.project_type,
                self.project_scale
            )
            
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            generated_path = Path(project_path)
            if generated_path.exists() and generated_path != self.installation_dir:
                # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                for item in generated_path.rglob("*"):
                    if item.is_file():
                        relative_path = item.relative_to(generated_path)
                        target_path = self.installation_dir / relative_path
                        target_path.parent.mkdir(parents=True, exist_ok=True)
                        shutil.copy2(item, target_path)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                shutil.rmtree(generated_path, ignore_errors=True)
            
            print(f"{colorize('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞', Colors.GREEN)}")
            
        except ImportError:
            # Fallback: —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            self._create_basic_structure()
    
    def _create_basic_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ (fallback)"""
        basic_structure = {
            "monitoring": ["__init__.py"],
            "reports": ["__init__.py"],
            "recommendations": ["__init__.py"],
            "autonomous": ["__init__.py"],
            "config": ["framework_config.json"],
            "logs": [".gitkeep"],
            "tests": ["__init__.py"]
        }
        
        for directory, files in basic_structure.items():
            dir_path = self.installation_dir / directory
            dir_path.mkdir(exist_ok=True)
            
            for file_name in files:
                file_path = dir_path / file_name
                if file_name == ".gitkeep":
                    file_path.touch()
                elif file_name.endswith(".py"):
                    file_path.write_text(f'"""{directory} package"""')
                elif file_name.endswith(".json"):
                    file_path.write_text('{}')
        
        print(f"{colorize('‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞', Colors.GREEN)}")
    
    def setup_virtual_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not self.config["create_venv"]:
            return
        
        print(f"\n{colorize('üêç –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...', Colors.BLUE)}")
        
        venv_path = self.installation_dir / "venv"
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ venv
            subprocess.run([
                sys.executable, "-m", "venv", str(venv_path)
            ], check=True, cwd=self.installation_dir)
            
            print(f"{colorize('‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', Colors.GREEN)}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –≤ venv
            if self.system_info["os"] == "Windows":
                pip_executable = venv_path / "Scripts" / "pip.exe"
                python_executable = venv_path / "Scripts" / "python.exe"
            else:
                pip_executable = venv_path / "bin" / "pip"
                python_executable = venv_path / "bin" / "python"
            
            subprocess.run([
                str(pip_executable), "install", "--upgrade", "pip"
            ], check=True, cwd=self.installation_dir)
            
            print(f"{colorize('‚úÖ pip –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏', Colors.GREEN)}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.venv_python = str(python_executable)
            self.venv_pip = str(pip_executable)
            
        except subprocess.CalledProcessError as e:
            print(f"{colorize('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', Colors.RED)} {e}")
            print(f"{colorize('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º Python...', Colors.YELLOW)}")
            self.venv_python = sys.executable
            self.venv_pip = sys.executable + " -m pip"
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        if not self.config["install_dependencies"]:
            return
        
        print(f"\n{colorize('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', Colors.BLUE)}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
        framework_deps = [
            "aiosqlite>=0.19.0",
            "numpy>=1.24.0",
            "scikit-learn>=1.3.0",
            "matplotlib>=3.7.0",
            "seaborn>=0.12.0",
            "jinja2>=3.1.0",
            "schedule>=1.2.0",
            "jsonschema>=4.17.0"
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–µ–∫—Ç–∞
        project_deps = {
            "telegram_bot": [
                "aiogram>=3.2.0",
                "python-dotenv>=1.0.0",
                "aiohttp>=3.9.0"
            ],
            "web_api": [
                "fastapi>=0.104.0",
                "uvicorn>=0.24.0",
                "pydantic>=2.0.0",
                "httpx>=0.25.0"
            ],
            "cli_tool": [
                "click>=8.1.0",
                "rich>=13.0.0",
                "typer>=0.9.0"
            ],
            "ml_service": [
                "torch>=2.0.0",
                "transformers>=4.30.0",
                "mlflow>=2.8.0",
                "pandas>=2.0.0"
            ]
        }
        
        all_deps = framework_deps + project_deps.get(self.project_type, [])
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã pip
            pip_cmd = self.venv_pip if hasattr(self, 'venv_pip') else [sys.executable, "-m", "pip"]
            if isinstance(pip_cmd, str):
                pip_cmd = pip_cmd.split()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            for dep in all_deps:
                print(f"  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}...")
                subprocess.run(
                    pip_cmd + ["install", dep],
                    check=True,
                    capture_output=True,
                    cwd=self.installation_dir
                )
            
            print(f"{colorize('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', Colors.GREEN)}")
            
        except subprocess.CalledProcessError as e:
            print(f"{colorize('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', Colors.RED)} {e}")
            print(f"{colorize('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:', Colors.YELLOW)}")
            print(f"cd {self.installation_dir}")
            print("pip install -r requirements.txt")
    
    def initialize_git(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        if not self.config["initialize_git"]:
            return
        
        print(f"\n{colorize('üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...', Colors.BLUE)}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git
            subprocess.run(["git", "init"], check=True, 
                         capture_output=True, cwd=self.installation_dir)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            subprocess.run(["git", "add", "."], check=True,
                         capture_output=True, cwd=self.installation_dir)
            
            # –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
            subprocess.run([
                "git", "commit", "-m", f"Initial commit: {self.project_name} with Claude MultiAgent Framework"
            ], check=True, capture_output=True, cwd=self.installation_dir)
            
            print(f"{colorize('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', Colors.GREEN)}")
            
        except (subprocess.CalledProcessError, FileNotFoundError):
            print(f"{colorize('‚ö†Ô∏è Git –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...', Colors.YELLOW)}")
    
    def create_example_code(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞"""
        if not self.config["create_example"]:
            return
        
        print(f"\n{colorize('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞...', Colors.BLUE)}")
        
        example_file = self.installation_dir / "example.py"
        
        example_code = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {self.project_name}
–°–æ–∑–¥–∞–Ω Claude MultiAgent Framework Installer
"""

from framework_init import initialize_framework

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ {self.project_name}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
    if initialize_framework("{self.project_type}"):
        print("‚úÖ –§—Ä–µ–π–º–≤–æ—Ä–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        try:
            from monitoring.mcp_monitor import track_mcp_call
            
            @track_mcp_call("example_agent", "example_server")
            def example_function():
                print("üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
                return "–£—Å–ø–µ—Ö!"
            
            result = example_function()
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {{result}}")
            
        except ImportError:
            print("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞")

if __name__ == "__main__":
    main()
'''
        
        example_file.write_text(example_code)
        print(f"{colorize('‚úÖ –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω:', Colors.GREEN)} example.py")
    
    def run_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        if not self.config["run_tests"]:
            return
        
        print(f"\n{colorize('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...', Colors.BLUE)}")
        
        try:
            python_cmd = self.venv_python if hasattr(self, 'venv_python') else sys.executable
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
            subprocess.run([
                python_cmd, "-c", "import framework_init; print('‚úÖ Framework import OK')"
            ], check=True, cwd=self.installation_dir)
            
            # –ó–∞–ø—É—Å–∫ example.py
            example_file = self.installation_dir / "example.py"
            if example_file.exists():
                subprocess.run([
                    python_cmd, "example.py"
                ], check=True, cwd=self.installation_dir)
            
            print(f"{colorize('‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ', Colors.GREEN)}")
            
        except subprocess.CalledProcessError as e:
            print(f"{colorize('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', Colors.YELLOW)} {e}")
            print(f"{colorize('–ü—Ä–æ–µ–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞', Colors.YELLOW)}")
    
    def print_completion_info(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        print(f"\n{colorize('üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', Colors.GREEN + Colors.BOLD)}")
        print(f"{colorize('='*50, Colors.CYAN)}")
        
        print(f"\n{colorize('üìÅ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤:', Colors.CYAN)} {self.installation_dir}")
        print(f"{colorize('üè∑Ô∏è –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:', Colors.CYAN)} {self.project_type}")
        print(f"{colorize('üìä –ú–∞—Å—à—Ç–∞–±:', Colors.CYAN)} {self.project_scale}")
        
        print(f"\n{colorize('üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:', Colors.YELLOW)}")
        print(f"cd {self.installation_dir}")
        
        if self.config["create_venv"]:
            if self.system_info["os"] == "Windows":
                print("venv\\Scripts\\activate")
            else:
                print("source venv/bin/activate")
        
        if self.config["create_example"]:
            print("python example.py")
        
        print(f"\n{colorize('üìö –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', Colors.YELLOW)}")
        print("python framework_init.py  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞")
        print("python -m monitoring.mcp_monitor  # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        if self.project_type == "web_api":
            print("uvicorn app.main:app --reload  # –ó–∞–ø—É—Å–∫ API")
        elif self.project_type == "telegram_bot":
            print("python bot/main.py  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        
        print(f"\n{colorize('üí° –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:', Colors.CYAN)} docs/usage_guide.md")
        print(f"{colorize('üêõ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:', Colors.CYAN)} https://github.com/claude-multiagent-framework")
        
        print(f"\n{colorize('–£–¥–∞—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! ü§ñ', Colors.GREEN + Colors.BOLD)}")
    
    def install(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.print_banner()
        
        if not self.check_prerequisites():
            print(f"\n{colorize('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π', Colors.RED)}")
            return False
        
        if self.install_mode == "interactive":
            self.interactive_setup()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            self.create_project_structure()
            self.setup_virtual_environment()
            self.install_dependencies()
            self.initialize_git()
            self.create_example_code()
            self.run_tests()
            
            self.print_completion_info()
            return True
            
        except KeyboardInterrupt:
            print(f"\n{colorize('‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', Colors.YELLOW)}")
            return False
        except Exception as e:
            print(f"\n{colorize('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', Colors.RED)} {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞"""
    parser = argparse.ArgumentParser(description="Claude MultiAgent Framework Installer")
    parser.add_argument("--name", help="–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--type", choices=[
        "telegram_bot", "web_api", "cli_tool", "data_pipeline",
        "microservice", "ml_service", "desktop_app", "iot_device"
    ], help="–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--scale", choices=["minimal", "standard", "advanced", "enterprise"], 
                       help="–ú–∞—Å—à—Ç–∞–± –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--dir", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    parser.add_argument("--silent", action="store_true", help="–¢–∏—Ö–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞")
    parser.add_argument("--no-venv", action="store_true", help="–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
    parser.add_argument("--no-deps", action="store_true", help="–ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    parser.add_argument("--no-git", action="store_true", help="–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git")
    
    args = parser.parse_args()
    
    installer = FrameworkInstaller()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.silent:
        installer.install_mode = "silent"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–∏—Ö–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if not all([args.name, args.type, args.scale]):
            print(f"{colorize('‚ùå –î–ª—è —Ç–∏—Ö–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: --name, --type, --scale', Colors.RED)}")
            return 1
        
        installer.project_name = args.name
        installer.project_type = args.type
        installer.project_scale = args.scale
        installer.installation_dir = Path(args.dir) if args.dir else Path(os.getcwd()) / args.name
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ü–∏–π
    if args.no_venv:
        installer.config["create_venv"] = False
    if args.no_deps:
        installer.config["install_dependencies"] = False
    if args.no_git:
        installer.config["initialize_git"] = False
    
    # –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    success = installer.install()
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
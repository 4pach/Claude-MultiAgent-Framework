#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MCP Performance Monitor - –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
–ß–∞—Å—Ç—å Claude MultiAgent Framework

–ê–≤—Ç–æ—Ä: Claude MultiAgent System
–î–∞—Ç–∞: 2025-07-11
"""

import json
import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from pathlib import Path
import logging

@dataclass
class MCPRequest:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""
    agent: str
    mcp_server: str
    query: str
    timestamp: datetime
    request_id: str
    estimated_tokens: int = 0

@dataclass
class MCPResponse:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    request_id: str
    success: bool
    response_time: float
    tokens_used: int
    response_size: int
    cached: bool = False
    error_message: Optional[str] = None

@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    total_requests: int = 0
    total_tokens: int = 0
    total_time: float = 0.0
    success_rate: float = 0.0
    avg_response_time: float = 0.0
    cache_hit_rate: float = 0.0
    agent_usage: Dict[str, int] = None
    server_usage: Dict[str, int] = None

class MCPMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MCP –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, config_path: str = ".mcp.json"):
        self.config_path = Path(config_path)
        self.monitoring_data = []
        self.session_start = datetime.now()
        self.cache = {}
        self.performance_thresholds = {
            'max_response_time': 10.0,  # —Å–µ–∫—É–Ω–¥—ã
            'max_tokens_per_request': 1000,
            'max_session_tokens': 5000,
            'warning_response_time': 5.0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP
        self.mcp_config = self.load_mcp_config()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / "mcp_monitor.log"),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger("MCPMonitor")
        
    def load_mcp_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            if self.config_path.exists():
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                self.logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {self.config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {"mcpServers": {}}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {"mcpServers": {}}
    
    def log_request(self, agent: str, mcp_server: str, query: str, 
                   estimated_tokens: int = 0) -> str:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        request_id = f"{int(time.time() * 1000)}_{len(self.monitoring_data)}"
        
        request = MCPRequest(
            agent=agent,
            mcp_server=mcp_server,
            query=query,
            timestamp=datetime.now(),
            request_id=request_id,
            estimated_tokens=estimated_tokens
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cache_key = f"{mcp_server}:{hash(query)}"
        if cache_key in self.cache:
            self.logger.info(f"üîÑ [üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä] –î–£–ë–õ–ò–ö–ê–¢ –û–ë–ù–ê–†–£–ñ–ï–ù: {cache_key}")
            return self.use_cached_response(cache_key, request_id)
        
        self.monitoring_data.append({"type": "request", "data": asdict(request)})
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        agent_emoji = self.get_agent_emoji(agent)
        self.logger.info(f"[{agent_emoji} {agent} ‚Üí {mcp_server}] {query[:50]}...")
        
        return request_id
    
    def log_response(self, request_id: str, success: bool, response_time: float,
                    tokens_used: int, response_size: int, 
                    error_message: Optional[str] = None) -> str:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        response = MCPResponse(
            request_id=request_id,
            success=success,
            response_time=response_time,
            tokens_used=tokens_used,
            response_size=response_size,
            error_message=error_message
        )
        
        self.monitoring_data.append({"type": "response", "data": asdict(response)})
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        optimization_message = self.analyze_response_performance(response)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        self.logger.info(f"[MCP Response] {tokens_used} —Ç–æ–∫–µ–Ω–æ–≤, {response_time:.1f}—Å–µ–∫")
        self.logger.info(f"[üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä] {optimization_message}")
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if success and self.should_cache_response(response):
            self.cache_response(request_id, response)
        
        return optimization_message
    
    def analyze_response_performance(self, response: MCPResponse) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        if not response.success:
            return f"‚ùå –û—à–∏–±–∫–∞: {response.error_message}"
        
        if response.response_time > self.performance_thresholds['max_response_time']:
            return f"‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {response.response_time:.1f}—Å–µ–∫ (–ª–∏–º–∏—Ç: {self.performance_thresholds['max_response_time']}—Å–µ–∫)"
        
        if response.tokens_used > self.performance_thresholds['max_tokens_per_request']:
            return f"üí° –ë–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç: {response.tokens_used} —Ç–æ–∫–µ–Ω–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å—É–∑–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
        
        if response.response_time > self.performance_thresholds['warning_response_time']:
            return f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({response.response_time:.1f}—Å–µ–∫)"
        
        if response.tokens_used < 100:
            return f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
        
        return f"‚úÖ –•–æ—Ä–æ—à–æ: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    
    def should_cache_response(self, response: MCPResponse) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        # –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        return (response.success and 
                100 <= response.tokens_used <= 800 and
                response.response_time < 10.0)
    
    def cache_response(self, request_id: str, response: MCPResponse):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
        request_data = None
        for item in self.monitoring_data:
            if (item["type"] == "request" and 
                item["data"]["request_id"] == request_id):
                request_data = item["data"]
                break
        
        if request_data:
            cache_key = f"{request_data['mcp_server']}:{hash(request_data['query'])}"
            cache_ttl = self.get_cache_ttl(request_data['mcp_server'])
            
            self.cache[cache_key] = {
                'response': asdict(response),
                'expires': datetime.now() + timedelta(seconds=cache_ttl),
                'usage_count': 0
            }
            
            self.logger.info(f"üíæ –û—Ç–≤–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω: {cache_key} (TTL: {cache_ttl}—Å–µ–∫)")
    
    def get_cache_ttl(self, mcp_server: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        ttl_mapping = {
            'context7': 14400,      # 4 —á–∞—Å–∞
            'github': 86400,        # 24 —á–∞—Å–∞  
            'exa': 43200,          # 12 —á–∞—Å–æ–≤
            'taskmaster-ai': 7200,  # 2 —á–∞—Å–∞
            'wcgw': 3600,          # 1 —á–∞—Å
            'youtube-transcript': 172800  # 48 —á–∞—Å–æ–≤
        }
        return ttl_mapping.get(mcp_server, 3600)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
    
    def use_cached_response(self, cache_key: str, request_id: str) -> str:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        cached_data = self.cache[cache_key]
        cached_response = cached_data['response']
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        cached_data['usage_count'] += 1
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
        response = MCPResponse(
            request_id=request_id,
            success=cached_response['success'],
            response_time=0.1,  # –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞
            tokens_used=cached_response['tokens_used'],
            response_size=cached_response['response_size'],
            cached=True
        )
        
        self.monitoring_data.append({"type": "response", "data": asdict(response)})
        
        savings_time = cached_response['response_time']
        savings_tokens = cached_response['tokens_used']
        
        self.logger.info(f"[MCP Response] –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (0.1—Å–µ–∫)")
        return f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à. –≠–∫–æ–Ω–æ–º–∏—è: {savings_tokens} —Ç–æ–∫–µ–Ω–æ–≤, {savings_time:.1f}—Å–µ–∫"
    
    def get_agent_emoji(self, agent: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–¥–∞–≥–µ–Ω—Ç–∞"""
        emoji_mapping = {
            'architect': 'üß†',
            'engineer': 'üß™', 
            'integrator': 'üì¶',
            'critic': 'üõ°Ô∏è',
            'manager': 'üß≠',
            'optimizer': 'üí∞'
        }
        return emoji_mapping.get(agent.lower(), 'üë§')
    
    def generate_session_report(self) -> PerformanceMetrics:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        requests = [item["data"] for item in self.monitoring_data if item["type"] == "request"]
        responses = [item["data"] for item in self.monitoring_data if item["type"] == "response"]
        
        if not responses:
            return PerformanceMetrics()
        
        # –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        total_requests = len(responses)
        successful_responses = [r for r in responses if r["success"]]
        total_tokens = sum(r["tokens_used"] for r in responses)
        total_time = sum(r["response_time"] for r in responses)
        cached_responses = [r for r in responses if r.get("cached", False)]
        
        success_rate = len(successful_responses) / total_requests if total_requests > 0 else 0
        avg_response_time = total_time / total_requests if total_requests > 0 else 0
        cache_hit_rate = len(cached_responses) / total_requests if total_requests > 0 else 0
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –∞–≥–µ–Ω—Ç–∞–º –∏ —Å–µ—Ä–≤–µ—Ä–∞–º
        agent_usage = {}
        server_usage = {}
        
        for request in requests:
            agent = request["agent"]
            server = request["mcp_server"]
            
            agent_usage[agent] = agent_usage.get(agent, 0) + 1
            server_usage[server] = server_usage.get(server, 0) + 1
        
        return PerformanceMetrics(
            total_requests=total_requests,
            total_tokens=total_tokens,
            total_time=total_time,
            success_rate=success_rate,
            avg_response_time=avg_response_time,
            cache_hit_rate=cache_hit_rate,
            agent_usage=agent_usage,
            server_usage=server_usage
        )
    
    def print_session_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ —Å–µ—Å—Å–∏–∏"""
        metrics = self.generate_session_report()
        session_duration = datetime.now() - self.session_start
        
        print("\n" + "="*60)
        print("[üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä] === –°–í–û–î–ö–ê –°–ï–°–°–ò–ò ===")
        print("="*60)
        print(f"üìÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session_duration}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics.total_requests}")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics.success_rate:.1%}")
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics.avg_response_time:.1f}—Å–µ–∫")
        print(f"üíæ –ö—ç—à hit rate: {metrics.cache_hit_rate:.1%}")
        print(f"üî¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {metrics.total_tokens:,}")
        print(f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {metrics.total_time:.1f}—Å–µ–∫")
        
        if metrics.agent_usage:
            print("\nüìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –∞–≥–µ–Ω—Ç–∞–º:")
            for agent, count in sorted(metrics.agent_usage.items(), key=lambda x: x[1], reverse=True):
                emoji = self.get_agent_emoji(agent)
                print(f"  {emoji} {agent}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        if metrics.server_usage:
            print("\nüåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:")
            for server, count in sorted(metrics.server_usage.items(), key=lambda x: x[1], reverse=True):
                print(f"  ‚Ä¢ {server}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        self.print_optimization_recommendations(metrics)
        
        print("="*60)
    
    def print_optimization_recommendations(self, metrics: PerformanceMetrics):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞:")
        
        if metrics.cache_hit_rate < 0.3:
            print("  ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        if metrics.avg_response_time > 5.0:
            print("  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
        
        if metrics.total_tokens > self.performance_thresholds['max_session_tokens']:
            print(f"  ‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ—Å—Å–∏–∏ ({metrics.total_tokens}/{self.performance_thresholds['max_session_tokens']})")
        
        if metrics.success_rate < 0.95:
            print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        if metrics.server_usage:
            most_used = max(metrics.server_usage.items(), key=lambda x: x[1])
            if most_used[1] > metrics.total_requests * 0.5:
                print(f"  ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ {most_used[0]}")
    
    def cleanup_expired_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞"""
        now = datetime.now()
        expired_keys = []
        
        for key, data in self.cache.items():
            if now > data['expires']:
                expired_keys.append(key)
        
        for key in expired_keys:
            del self.cache[key]
            self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à: {key}")
    
    def save_monitoring_data(self, filepath: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–∞–π–ª"""
        if filepath is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filepath = f"logs/monitoring_session_{timestamp}.json"
        
        Path("logs").mkdir(exist_ok=True)
        
        session_data = {
            'session_start': self.session_start.isoformat(),
            'session_end': datetime.now().isoformat(),
            'monitoring_data': self.monitoring_data,
            'performance_metrics': asdict(self.generate_session_report()),
            'cache_stats': {
                'total_entries': len(self.cache),
                'cache_usage': {k: v['usage_count'] for k, v in self.cache.items()}
            }
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(session_data, f, ensure_ascii=False, indent=2, default=str)
        
        self.logger.info(f"üìÑ –î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
mcp_monitor = MCPMonitor()

def log_mcp_request(agent: str, mcp_server: str, query: str, estimated_tokens: int = 0) -> str:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è MCP –∑–∞–ø—Ä–æ—Å–∞"""
    return mcp_monitor.log_request(agent, mcp_server, query, estimated_tokens)

def log_mcp_response(request_id: str, success: bool, response_time: float,
                    tokens_used: int, response_size: int, 
                    error_message: str = None) -> str:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è MCP –æ—Ç–≤–µ—Ç–∞"""
    return mcp_monitor.log_response(request_id, success, response_time, 
                                  tokens_used, response_size, error_message)

def print_session_summary():
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–∏"""
    mcp_monitor.print_session_summary()

def save_session_data(filepath: str = None):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""
    mcp_monitor.save_monitoring_data(filepath)

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üîß MCP Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print("üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ log_mcp_request() –∏ log_mcp_response() –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("üìà –í—ã–∑–æ–≤–∏—Ç–µ print_session_summary() –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")